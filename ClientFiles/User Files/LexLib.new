object SyntaxManager1: TSyntaxManager
  Left = 360
  Top = 136
  object SyntAnal38: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~!]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'break'
              'case'
              'catch'
              'class'
              'const'
              'continue'
              'debugger'
              'default'
              'delete'
              'do'
              'else'
              'enum'
              'export'
              'extends'
              'false'
              'finally'
              'for'
              'function'
              'if'
              'import'
              'in'
              'new'
              'null'
              'return'
              'super'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typeof'
              'var'
              'void'
              'while'
              'with')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
      end
      item
        DisplayName = 'function'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
          end>
        BlockEnd = 'function end'
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      ''
      '// example function'
      'function SetEnabled(A,count)'
      '{'
      '  for(i= 0; i< count;i++)'
      '    A(i).Enabled = !A(i).Enabled;'
      ''
      '}'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'js'
    LexerName = 'Java Script'
  end
  object SyntAnalyzer2: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        FormatType = ftColor
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Define'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '(?-i)'#13#10'\#define(.*\\\s*\n)*'#13#10'.*  # last line'#13#10#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~\.]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__asm'
              '__automated'
              '__cdecl'
              '__classid'
              '__closure'
              '__declspec'
              '__dispid'
              '__except'
              '__export'
              '__fastcall'
              '__finally'
              '__import'
              '__inline'
              '__int64'
              '__msfastcall'
              '__msreturn'
              '__pascal'
              '__property'
              '__published'
              '__stdcall'
              '__try'
              '__uuidof'
              '_asm'
              '_cdecl'
              '_export'
              '_fastcall'
              '_import'
              '_pascal'
              '_stdcall'
              'asm'
              'auto'
              'bool'
              'break'
              'case'
              'catch'
              'cdecl'
              'char'
              'class'
              'const'
              'continue'
              'default'
              'delete'
              'do'
              'double'
              'else'
              'enum'
              'explicit'
              'export'
              'extern'
              'false'
              'float'
              'for'
              'friend'
              'goto'
              'if'
              'inline'
              'int'
              'long'
              'mutable'
              'new'
              'operator'
              'pascal'
              'private'
              'protected'
              'public'
              'register'
              'return'
              'short'
              'signed'
              'sizeof'
              'static'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typedef'
              'typeid'
              'typename'
              'union'
              'unsigned'
              'uuid'
              'virtual'
              'void'
              'volatile'
              'wchar_t'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '#if'
        ConditionList = <
          item
            TagList.Strings = (
              '#if')
            CondType = tcMask
            TokenTypes = 512
          end>
        BlockEnd = '#endif'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = '#endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#endif')
            TokenTypes = 512
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function begin'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '::')
            CondType = tcNotEqual
            TokenTypes = 8
          end>
        IdentIndex = -1
        BlockOffset = -1
        BlockEnd = 'function end'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'cls func'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '::')
            TokenTypes = 8
          end>
        BlockOffset = -1
        BlockEnd = 'cls func end'
        NameFmt = '%s-1'
        GroupFmt = '%s1'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'cls func end'
        BlockName = 'cls func'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '{ ... }'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/*Syntax highlighting*/'
      ''
      '#define MAX(a, b)  \'
      '     ((a > b) ? a : b) '
      '     '
      'void __fastcall TForm1->Button1Click(Sender: TObject);'
      '{'
      ' int Number = 123;  // View integer number style'
      ' double FloatNumber = 0.123e+2;  // View float number style'
      
        ' Caprion = "This Number is " + IntToStr(Number); // View string ' +
        'style'
      ' Number += 0x1FA7; // View HEX style'
      ' char c = '#39'D'#39';'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'c cpp cxx h hpp'
    LexerName = 'C++'
    LineComment = '//'
  end
  object SyntAnalyzer3: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Line separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clRed
      end
      item
        DisplayName = 'Sub background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 15663082
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = 
          '#if only one " string to end '#13#10'#of line will be highlighted, '#13#10'#' +
          'otherwise after closing it '#13#10'#string will not be highlighted '#13#10'"' +
          '.*?("|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'end'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = 'end'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '#first charecter can'#39't be digit'#13#10'[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'#13#10' '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '#any sequence of digits'#13#10'\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '#all chars after '#39' to end of line'#13#10#39'.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '#Hex is started with $ sign'#13#10'\$[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-&%\$]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'addressof'
              'alias'
              'and'
              'appactivate'
              'as'
              'beep'
              'binary'
              'boolean'
              'byref'
              'byte'
              'byval'
              'call'
              'case'
              'chdir'
              'chdrive'
              'choose'
              'close'
              'const'
              'currency'
              'date'
              'decimal'
              'declare'
              'deletesetting'
              'dim'
              'do'
              'doevents'
              'double'
              'each'
              'else'
              'elseif'
              'empty'
              'end'
              'enum'
              'eqv'
              'erase'
              'error'
              'event'
              'exit'
              'filecopy'
              'for'
              'friend'
              'function'
              'get'
              'gosub'
              'goto'
              'if'
              'imp'
              'implements'
              'in'
              'input'
              'integer'
              'is'
              'kill'
              'let'
              'lib'
              'like'
              'line'
              'load'
              'lock'
              'long'
              'loop'
              'lset'
              'new'
              'next'
              'not'
              'null'
              'object'
              'on'
              'optional'
              'or'
              'paramarray'
              'private'
              'property'
              'public'
              'return'
              'select'
              'set'
              'single'
              'static'
              'step'
              'stop'
              'string'
              'sub'
              'switch'
              'then'
              'to'
              'type'
              'typeof'
              'unlock'
              'until'
              'variant'
              'wend'
              'while'
              'with'
              'withevents'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub begin line break'
        StyleName = 'Line separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub end line break'
        StyleName = 'Line separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        LinePos = lbBottom
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub start'
        StyleName = 'Sub background'
        BlockName = 'Sub start'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Sub end'
        Highlight = True
        NameFmt = '%s1 %s0'
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub end'
        BlockName = 'Sub start'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'function'
              'if'
              'property'
              'select'
              'type'
              'with')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s1 %s0'
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 509
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      #39' Syntax highlighting'
      'Function PrintNumber'
      '  Dim Number'
      '  Dim X      34.4e+5'
      ''
      '  Number = 123456'
      '  Response.Write "The number is " & number'
      '             '
      '  For I = 0 To Number'
      '    X = X + &h4c'
      '    X = X - &o8'
      '    X = X + 1.0'
      '  Next'
      ''
      '  I = I + @;  '
      'End Function')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'bas'
    LexerName = 'Visual Basic'
    LineComment = #39
  end
  object SyntAnal22: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BorderColorLeft = clGray
        BorderColorTop = clGray
        BorderColorRight = clGray
        BorderColorBottom = clGray
        MultiLineBorder = True
      end
      item
        DisplayName = 'Tag bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'CDATA'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Tag Key'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'ERROR content'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag ident'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Tag param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Tag properties'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Current tag'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 15987699
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current Block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = 15400927
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'DTD element type'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'DTD bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -19
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Tree item (attribute)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 14155775
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (tag)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'PI'
        TokenType = 12
        Expression = '(?s)<\?.*?(\?>|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA start'
        StyleName = 'CDATA'
        TokenType = 11
        Expression = '<!\[CDATA\['#13#10'#(?s)<!\[CDATA\[.*?(\]\]>|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA Text'
        StyleName = 'Text'
        BlockName = 'CDATA begin'
        Expression = '(?s)[^\]]*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA end'
        StyleName = 'Tag bound'
        BlockName = 'CDATA begin'
        TokenType = 14
        Expression = '\]\]>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 9
        Expression = '<[/!\-\:\?]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '[/\?]?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'DTD Element type'
        StyleName = 'DTD element type'
        BlockName = 'DTD element start'
        TokenType = 2
        Expression = '(?s)\((\(.*?\)|.)*?\)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'DTD bounds: [ ] '
        StyleName = 'DTD bound'
        BlockName = 'DOCTYPE begin'
        Expression = '[\[\]]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s)".*?"'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        TokenType = 3
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag ident'
        StyleName = 'Tag ident'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^>=\?\s/]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Error content'
        StyleName = 'ERROR content'
        BlockName = 'Tag begin'
        Expression = '[^>\s]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '&...'
        StyleName = 'Tag Key'
        TokenType = 4
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        BlockName = 'CDATA begin'
        NotParent = True
        TokenType = 4
        Expression = '[^<&]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag begin'
        StyleName = 'Current tag'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpRange
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'DTD element start'
        ConditionList = <
          item
            TagList.Strings = (
              'DOCTYPE')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<!')
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'DTD element end'
        NameFmt = '%s-1'
        HighlightPos = cpAny
        CollapseFmt = '< %s0 %s-1 >'
      end
      item
        DisplayName = 'DTD element end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'DOCTYPE begin'
        ConditionList = <
          item
            TagList.Strings = (
              'DOCTYPE')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<!')
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'DOCTYPE end'
        NameFmt = 'Document structure'
        HighlightPos = cpAny
        CollapseFmt = 'Document structure'
      end
      item
        DisplayName = 'DOCTYPE end'
        BlockName = 'DOCTYPE begin'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '>')
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag keys'
        StyleName = 'Tag Key'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 512
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag block begin'
        StyleName = 'Current Block'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 512
          end>
        BlockEnd = 'Tag block end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = ' %s0 >'
        TreeItemStyle = 'Tree item (tag)'
      end
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 512
          end>
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End of simple tag'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/>')
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag block begin'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Comment begin'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'CDATA end'
        BlockName = 'CDATA begin'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 16384
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'CDATA begin'
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        BlockEnd = 'CDATA end'
        NameFmt = '%s-1'
        HighlightPos = cpAny
        CollapseFmt = 'CDATA'
      end
      item
        DisplayName = 'Tag attribute'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 16
          end
          item
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NameFmt = '%s0 %s-1 %s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemStyle = 'Tree item (attribute)'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '<?xml version="1.0" encoding="ISO-8859-1" ?>'
      ''
      '<!DOCTYPE web-app ['
      
        '  <!ELEMENT web-app (icon?, display-name?, description?, distrib' +
        'utable?,'
      '  context-param*, filter*, filter-mapping*, listener*, servlet*,'
      
        '  servlet-mapping*, session-config?, mime-mapping*, welcome-file' +
        '-list?,'
      
        '  error-page*, taglib*, resource-env-ref*, resource-ref*, securi' +
        'ty-constraint*,'
      
        '  login-config?, security-role*, env-entry*, ejb-ref*,  ejb-loca' +
        'l-ref*)>'
      '  <!ELEMENT auth-constraint (description?, role-name*)>'
      '  <!ELEMENT auth-method (#PCDATA)>'
      
        '  <!ELEMENT context-param (param-name, param-value, description?' +
        ')>'
      '  <!ELEMENT description (#PCDATA)>'
      '  <!ELEMENT display-name (#PCDATA)>'
      '  <!ELEMENT distributable EMPTY>'
      '  <!ELEMENT ejb-link (#PCDATA)>'
      
        '  <!ELEMENT ejb-local-ref (description?, ejb-ref-name, ejb-ref-t' +
        'ype,local-home, local, ejb-link?)>'
      
        '  <!ELEMENT ejb-ref (description?, ejb-ref-name, ejb-ref-type,ho' +
        'me, remote, ejb-link?)>'
      '  <!ELEMENT ejb-ref-name (#PCDATA)>'
      '  <!ELEMENT ejb-ref-type (#PCDATA)>'
      
        '  <!ELEMENT env-entry (description?, env-entry-name, env-entry-v' +
        'alue?,env-entry-type)>'
      '  <!ELEMENT env-entry-name (#PCDATA)>'
      '  <!ELEMENT env-entry-type (#PCDATA)>'
      '  <!ELEMENT env-entry-value (#PCDATA)>'
      '  <!ELEMENT error-code (#PCDATA)>'
      
        '  <!ELEMENT error-page ((error-code | exception-type), location)' +
        '>'
      '  <!ELEMENT exception-type (#PCDATA)>'
      '  <!ELEMENT extension (#PCDATA)>'
      
        '  <!ELEMENT filter (icon?, filter-name, display-name?, descripti' +
        'on?,filter-class, init-param*)>'
      '  <!ELEMENT filter-class (#PCDATA)>'
      
        '  <!ELEMENT filter-mapping (filter-name, (url-pattern | servlet-' +
        'name))>'
      '  <!ELEMENT filter-name (#PCDATA)>'
      '  <!ELEMENT form-error-page (#PCDATA)>'
      
        '  <!ELEMENT form-login-config (form-login-page, form-error-page)' +
        '>'
      '  <!ELEMENT form-login-page (#PCDATA)>'
      '  <!ELEMENT home (#PCDATA)>'
      '  <!ELEMENT http-method (#PCDATA)>'
      '  <!ELEMENT icon (small-icon?, large-icon?)>'
      '  <!ELEMENT init-param (param-name, param-value, description?)>'
      '  <!ELEMENT jsp-file (#PCDATA)>'
      '  <!ELEMENT large-icon (#PCDATA)>'
      '  <!ELEMENT listener (listener-class)>'
      '  <!ELEMENT listener-class (#PCDATA)>'
      '  <!ELEMENT load-on-startup (#PCDATA)>'
      '  <!ELEMENT local (#PCDATA)>'
      '  <!ELEMENT local-home (#PCDATA)>'
      '  <!ELEMENT location (#PCDATA)>'
      
        '  <!ELEMENT login-config (auth-method?, realm-name?, form-login-' +
        'config?)>'
      '  <!ELEMENT mime-mapping (extension, mime-type)>'
      '  <!ELEMENT mime-type (#PCDATA)>'
      '  <!ELEMENT param-name (#PCDATA)>'
      '  <!ELEMENT param-value (#PCDATA)>'
      '  <!ELEMENT realm-name (#PCDATA)>'
      '  <!ELEMENT remote (#PCDATA)>'
      '  <!ELEMENT res-auth (#PCDATA)>'
      '  <!ELEMENT res-ref-name (#PCDATA)>'
      '  <!ELEMENT res-sharing-scope (#PCDATA)>'
      '  <!ELEMENT res-type (#PCDATA)>'
      
        '  <!ELEMENT resource-env-ref (description?, resource-env-ref-nam' +
        'e,resource-env-ref-type)>'
      '  <!ELEMENT resource-env-ref-name (#PCDATA)>'
      '  <!ELEMENT resource-env-ref-type (#PCDATA)>'
      
        '  <!ELEMENT resource-ref (description?, res-ref-name, res-type, ' +
        'res-auth,res-sharing-scope?)>'
      '  <!ELEMENT role-link (#PCDATA)>'
      '  <!ELEMENT role-name (#PCDATA)>'
      '  <!ELEMENT run-as (description?, role-name)>'
      
        '  <!ELEMENT security-constraint (display-name?, web-resource-col' +
        'lection+,auth-constraint?, user-data-constraint?)>'
      '  <!ELEMENT security-role (description?, role-name)>'
      
        '  <!ELEMENT security-role-ref (description?, role-name, role-lin' +
        'k?)>'
      
        '  <!ELEMENT servlet (icon?, servlet-name, display-name?, descrip' +
        'tion?,'
      
        '    (servlet-class|jsp-file), init-param*, load-on-startup?, run' +
        '-as?, security-role-ref*)>'
      '  <!ELEMENT servlet-class (#PCDATA)>'
      '  <!ELEMENT servlet-mapping (servlet-name, url-pattern)>'
      '  <!ELEMENT servlet-name (#PCDATA)>'
      '  <!ELEMENT session-config (session-timeout?)>'
      '  <!ELEMENT session-timeout (#PCDATA)>'
      '  <!ELEMENT small-icon (#PCDATA)>'
      '  <!ELEMENT taglib (taglib-uri, taglib-location)>'
      '  <!ELEMENT taglib-location (#PCDATA)>'
      '  <!ELEMENT taglib-uri (#PCDATA)>'
      '  <!ELEMENT transport-guarantee (#PCDATA)>'
      '  <!ELEMENT url-pattern (#PCDATA)>'
      
        '  <!ELEMENT user-data-constraint (description?, transport-guaran' +
        'tee)>'
      
        '  <!ELEMENT web-resource-collection (web-resource-name, descript' +
        'ion?,url-pattern*, http-method*)>'
      '  <!ELEMENT web-resource-name (#PCDATA)>'
      '  <!ELEMENT welcome-file (#PCDATA)>'
      '  <!ELEMENT welcome-file-list (welcome-file+)>'
      '  <!ATTLIST auth-constraint id ID #IMPLIED>'
      '  <!ATTLIST auth-method id ID #IMPLIED>'
      '  <!ATTLIST context-param id ID #IMPLIED>'
      '  <!ATTLIST description id ID #IMPLIED>'
      '  <!ATTLIST display-name id ID #IMPLIED>'
      '  <!ATTLIST distributable id ID #IMPLIED>'
      '  <!ATTLIST ejb-link id ID #IMPLIED>'
      '  <!ATTLIST ejb-local-ref id ID #IMPLIED>'
      '  <!ATTLIST ejb-ref id ID #IMPLIED>'
      '  <!ATTLIST ejb-ref-name id ID #IMPLIED>'
      '  <!ATTLIST ejb-ref-type id ID #IMPLIED>'
      '  <!ATTLIST env-entry id ID #IMPLIED>'
      '  <!ATTLIST env-entry-name id ID #IMPLIED>'
      '  <!ATTLIST env-entry-type id ID #IMPLIED>'
      '  <!ATTLIST env-entry-value id ID #IMPLIED>'
      '  <!ATTLIST error-code id ID #IMPLIED>'
      '  <!ATTLIST error-page id ID #IMPLIED>'
      '  <!ATTLIST exception-type id ID #IMPLIED>'
      '  <!ATTLIST extension id ID #IMPLIED>'
      '  <!ATTLIST filter id ID #IMPLIED>'
      '  <!ATTLIST filter-class id ID #IMPLIED>'
      '  <!ATTLIST filter-mapping id ID #IMPLIED>'
      '  <!ATTLIST filter-name id ID #IMPLIED>'
      '  <!ATTLIST form-error-page id ID #IMPLIED>'
      '  <!ATTLIST form-login-config id ID #IMPLIED>'
      '  <!ATTLIST form-login-page id ID #IMPLIED>'
      '  <!ATTLIST home id ID #IMPLIED>'
      '  <!ATTLIST http-method id ID #IMPLIED>'
      '  <!ATTLIST icon id ID #IMPLIED>'
      '  <!ATTLIST init-param id ID #IMPLIED>'
      '  <!ATTLIST jsp-file id ID #IMPLIED>'
      '  <!ATTLIST large-icon id ID #IMPLIED>'
      '  <!ATTLIST listener id ID #IMPLIED>'
      '  <!ATTLIST listener-class id ID #IMPLIED>'
      '  <!ATTLIST load-on-startup id ID #IMPLIED>'
      '  <!ATTLIST local id ID #IMPLIED>'
      '  <!ATTLIST local-home id ID #IMPLIED>'
      '  <!ATTLIST location id ID #IMPLIED>'
      '  <!ATTLIST login-config id ID #IMPLIED>'
      '  <!ATTLIST mime-mapping id ID #IMPLIED>'
      '  <!ATTLIST mime-type id ID #IMPLIED>'
      '  <!ATTLIST param-name id ID #IMPLIED>'
      '  <!ATTLIST param-value id ID #IMPLIED>'
      '  <!ATTLIST realm-name id ID #IMPLIED>'
      '  <!ATTLIST remote id ID #IMPLIED>'
      '  <!ATTLIST res-auth id ID #IMPLIED>'
      '  <!ATTLIST res-ref-name id ID #IMPLIED>'
      '  <!ATTLIST res-sharing-scope id ID #IMPLIED>'
      '  <!ATTLIST res-type id ID #IMPLIED>'
      '  <!ATTLIST resource-env-ref id ID #IMPLIED>'
      '  <!ATTLIST resource-env-ref-name id ID #IMPLIED>'
      '  <!ATTLIST resource-env-ref-type id ID #IMPLIED>'
      '  <!ATTLIST resource-ref id ID #IMPLIED>'
      '  <!ATTLIST role-link id ID #IMPLIED>'
      '  <!ATTLIST role-name id ID #IMPLIED>'
      '  <!ATTLIST run-as id ID #IMPLIED>'
      '  <!ATTLIST security-constraint id ID #IMPLIED>'
      '  <!ATTLIST security-role id ID #IMPLIED>'
      '  <!ATTLIST security-role-ref id ID #IMPLIED>'
      '  <!ATTLIST servlet id ID #IMPLIED>'
      '  <!ATTLIST servlet-class id ID #IMPLIED>'
      '  <!ATTLIST servlet-mapping id ID #IMPLIED>'
      '  <!ATTLIST servlet-name id ID #IMPLIED>'
      '  <!ATTLIST session-config id ID #IMPLIED>'
      '  <!ATTLIST session-timeout id ID #IMPLIED>'
      '  <!ATTLIST small-icon id ID #IMPLIED>'
      '  <!ATTLIST taglib id ID #IMPLIED>'
      '  <!ATTLIST taglib-location id ID #IMPLIED>'
      '  <!ATTLIST taglib-uri id ID #IMPLIED>'
      '  <!ATTLIST transport-guarantee id ID #IMPLIED>'
      '  <!ATTLIST url-pattern id ID #IMPLIED>'
      '  <!ATTLIST url-pattern beep ID #IMPLIED>'
      '  <!ATTLIST user-data-constraint id ID #IMPLIED>'
      '  <!ATTLIST web-app id ID #IMPLIED>'
      '  <!ATTLIST web-resource-collection id ID #IMPLIED>'
      '  <!ATTLIST web-resource-name id ID #IMPLIED>'
      '  <!ATTLIST welcome-file id ID #IMPLIED>'
      '  <!ATTLIST welcome-file-list id ID #IMPLIED>'
      ']>'
      ''
      '<web-app>'
      '    <display-name abc="123" '
      '    def="true"></display-name>'
      '    <description></description>'
      '    <filter-mapping>'
      '        <filter-name></filter-name>'
      '        <url-pattern></url-pattern>'
      '    </filter-mapping>'
      '</web-app>'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Tag Open'
      'Tag Close'
      'CDATA'
      'PI'
      'Attrib. value'
      'CDATA end')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'xml xsl xslt mmpa mmpr sti bdsproj'
    LexerName = 'XML Documents'
    Left = 140
    Top = 160
  end
  object SyntAnal29: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Reserved PL/SQL word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'SQL Functions'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'SQL*Plus Meta Commands'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Predefined Exceptions'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Default Oracle Packages'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Public Package Procedure'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clRed
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = clBtnFace
        FormatType = ftColor
        BorderTypeLeft = blDot
        BorderColorLeft = clMaroon
        BorderTypeTop = blDot
        BorderColorTop = clMaroon
        BorderTypeRight = blDot
        BorderColorRight = clMaroon
        BorderTypeBottom = blDot
        BorderColorBottom = clMaroon
      end
      item
        DisplayName = 'Current function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 16777205
        FormatType = ftBackGround
        MultiLineBorder = True
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 13369080
        FormatType = ftBackGround
      end
      item
        DisplayName = '()'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold, fsUnderline]
        BgColor = clBtnFace
        BorderTypeLeft = blDot
        BorderTypeTop = blDot
        BorderTypeRight = blDot
        BorderTypeBottom = blDot
      end
      item
        DisplayName = 'Big Bold (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Group (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Function (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Toad_Datatypes'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Toad_UserTables'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Toad_UserViews'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Toad_UserProcs'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Toad_SYSViews'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)(/\*.*?(\*/|\Z))|(?-s)(--.*)|(REM\s.*)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Q-Quote'
        StyleName = 'String'
        TokenType = 4
        Expression = 
          '(?s)(q'#39')((<.*?)(>'#39'|\Z)|(\(.*?)(\)'#39'|\Z)|({.*?)(}'#39'|\Z)|(\[.*?)(\]'#39'|\' +
          'Z))'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Q-Quote Catchall'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)(q'#39')((.).*?(\3'#39'|\Z))'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)('#39'|")(.*?)(\1|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Public Package Procedure'
        StyleName = 'Public Package Procedure'
        TokenType = 2
        Expression = 'DBMS_\w+?\.\w+'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '(?r)[\w$\#]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-\|]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keywords'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '@'
              '@@'
              'A'
              'ABORT'
              'ABS'
              'ACC'
              'ACCEPT'
              'ACCESS'
              'ACCESS_INTO_NULL'
              'ACCESSED'
              'ACCOUNT'
              'ACOS'
              'ACTIVATE'
              'ADD'
              'ADD_MONTHS'
              'ADMIN'
              'ADMINISTER'
              'ADMINISTRATOR'
              'ADVISE'
              'ADVISOR'
              'AFTER'
              'ALGORITHM'
              'ALIAS'
              'ALL'
              'ALL_ROWS'
              'ALLOCATE'
              'ALLOW'
              'ALTER'
              'ALWAYS'
              'ANALYZE'
              'ANCILLARY'
              'AND'
              'AND_EQUAL'
              'ANTIJOIN'
              'ANY'
              'ANYSCHEMA'
              'APPEND'
              'APPLY'
              'ARCHIVE'
              'ARCHIVELOG'
              'ARRAY'
              'ARRAYLEN'
              'AS'
              'ASC'
              'ASCII'
              'ASIN'
              'ASSOCIATE'
              'AT'
              'ATAN'
              'ATAN2'
              'ATTRIBUTE'
              'ATTRIBUTES'
              'AUDIT'
              'AUTHENTICATED'
              'AUTHENTICATION'
              'AUTHID'
              'AUTHORIZATION'
              'AUTO'
              'AUTOALLOCATE'
              'AUTOEXTEND'
              'AUTOMATIC'
              'AVAILABILITY'
              'AVG'
              'BACKUP'
              'BASE_TABLE'
              'BASICFILE'
              'BATCH'
              'BECOME'
              'BEFORE'
              'BEGIN'
              'BEGIN_OUTLINE_DATA'
              'BEHALF'
              'BETWEEN'
              'BFILE'
              'BFILENAME'
              'BIGFILE'
              'BINARY'
              'BINARY_DOUBLE'
              'BINARY_DOUBLE_INFINITY'
              'BINARY_DOUBLE_NAN'
              'BINARY_FLOAT'
              'BINARY_FLOAT_INFINITY'
              'BINARY_FLOAT_NAN'
              'BINARY_INTEGER'
              'BINDING'
              'BITAND'
              'BITMAP'
              'BITMAP_TREE'
              'BITMAPS'
              'BITS'
              'BLOB'
              'BLOCK'
              'BLOCK_RANGE'
              'BLOCKS'
              'BLOCKSIZE'
              'BODY'
              'BOOLEAN'
              'BOTH'
              'BOUND'
              'BREAK'
              'BROADCAST'
              'BTITLE'
              'BUFFER'
              'BUFFER_CACHE'
              'BUFFER_POOL'
              'BUILD'
              'BULK'
              'BY'
              'BYPASS_RECURSIVE_CHECK'
              'BYPASS_UJVC'
              'BYTE'
              'CACHE'
              'CACHE_CB'
              'CACHE_INSTANCES'
              'CACHE_TEMP_TABLE'
              'CALL'
              'CANCEL'
              'CARDINALITY'
              'CASCADE'
              'CASE'
              'CAST'
              'CATEGORY'
              'CEIL'
							'CELL_FLASH_CACHE'
              'CERTIFICATE'
              'CFILE'
              'CHAINED'
              'CHANGE'
              'CHAR'
              'CHAR_BASE'
              'CHAR_CS'
              'CHARACTER'
              'CHARTOROWID'
              'CHECK'
              'CHECKPOINT'
              'CHILD'
              'CHOOSE'
              'CHR'
              'CHUNK'
              'CIV_GB'
              'CLASS'
              'CLEAR'
              'CLOB'
              'CLONE'
              'CLOSE'
              'CLOSE_CACHED_OPEN_CURSORS'
              'CLUSTER'
              'CLUSTERING_FACTOR'
              'CLUSTERS'
              'COALESCE'
              'COARSE'
              'COLLECT'
              'COLLECTION_IS_NULL'
              'COLUMN'
              'COLUMN_STATS'
              'COLUMN_VALUE'
              'COLUMNS'
              'COMMENT'
              'COMMIT'
              'COMMITTED'
              'COMPACT'
              'COMPATIBILITY'
              'COMPILE'
              'COMPLETE'
              'COMPOSITE_LIMIT'
              'COMPRESS'
              'COMPUTE'
              'CONCAT'
              'CONFORMING'
              'CONNECT'
              'CONNECT_BY_COST_BASED'
              'CONNECT_BY_FILTERING'
              'CONNECT_BY_ISCYCLE'
              'CONNECT_BY_ISLEAF'
              'CONNECT_BY_ROOT'
              'CONNECT_TIME'
              'CONSIDER'
              'CONSISTENT'
              'CONSTANT'
              'CONSTRAINT'
              'CONSTRAINTS'
              'CONTAINER'
              'CONTENT'
              'CONTENTS'
              'CONTEXT'
              'CONTINUE'
              'CONTROLFILE'
              'CONVERT'
              'COPY'
              'CORR_K'
              'CORR_S'
              'CORRUPTION'
              'COS'
              'COSH'
              'COST'
              'COUNT'
              'CPU_COSTING'
              'CPU_PER_CALL'
              'CPU_PER_SESSION'
              'CRASH'
              'CREATE'
              'CREATE_STORED_OUTLINES'
              'CROSS'
              'CROSSEDITION'
              'CUBE'
              'CUBE_GB'
              'CURRENT'
              'CURRENT_DATE'
              'CURRENT_SCHEMA'
              'CURRENT_TIME'
              'CURRENT_TIMESTAMP'
              'CURRENT_USER'
              'CURRVAL'
              'CURSOR'
              'CURSOR_ALREADY_OPEN'
              'CURSOR_SHARING_EXACT'
              'CURSOR_SPECIFIC_SEGMENT'
              'CV'
              'CYCLE'
              'DANGLING'
              'DATA'
              'DATABASE'
              'DATAFILE'
              'DATAFILES'
              'DATAOBJNO'
              'DATE'
              'DATE_MODE'
              'DAY'
              'DB_ROLE_CHANGE'
              'DBA'
              'DBA_RECYCLEBIN'
              'DBMS_STATS'
              'DBTIMEZONE'
              'DDL'
              'DEALLOCATE'
              'DEBUG'
              'DEBUGOFF'
              'DEBUGON'
              'DEC'
              'DECIMAL'
              'DECLARE'
              'DECODE'
              'DECREMENT'
              'DECRYPT'
              'DEDUPLICATE'
              'DEF'
              'DEFAULT'
              'DEFERRABLE'
              'DEFERRED'
              'DEFINE'
              'DEFINE_EDITOR'
              'DEFINED'
              'DEFINER'
              'DEFINITION'
              'DEGREE'
              'DEL'
              'DELAY'
              'DELETE'
              'DELETING'
              'DELTA'
              'DEMAND'
              'DENSE_RANK'
              'DEQUEUE'
              'DEREF'
              'DEREF_NO_REWRITE'
              'DESC'
              'DESCRIBE'
              'DETACHED'
              'DETERMINES'
              'DICTIONARY'
              'DIGITS'
              'DIMENSION'
              'DIRECT_LOAD'
              'DIRECTORY'
              'DISABLE'
              'DISABLE_RPKE'
              'DISALLOW'
              'DISASSOCIATE'
              'DISCONNECT'
              'DISK'
              'DISKGROUP'
              'DISKS'
              'DISMOUNT'
              'DISPATCHERS'
              'DISTINCT'
              'DISTINGUISHED'
              'DISTRIBUTED'
              'DML'
              'DML_UPDATE'
              'DO'
              'DOCUMENT'
              'DOMAIN_INDEX_NO_SORT'
              'DOMAIN_INDEX_SORT'
              'DOUBLE'
              'DOWNGRADE'
              'DRIVING_SITE'
              'DROP'
              'DUMP'
              'DUP_VAL_ON_INDEX'
              'DYNAMIC'
              'DYNAMIC_SAMPLING'
              'DYNAMIC_SAMPLING_EST_CDN'
              'E'
              'EACH'
              'EDIT'
              'EDITION'
              'EDITIONING'
							'EDITIONS'
              'ELEMENT'
              'ELIMINATE_JOIN'
              'ELIMINATE_OBY'
              'ELIMINATE_OUTER_JOIN'
              'ELSE'
              'ELSIF'
              'EMPTY'
              'EMPTY_BLOB'
              'EMPTY_CLOB'
              'ENABLE'
              'ENCRYPT'
              'ENCRYPTED'
              'ENCRYPTION'
              'END'
              'END_OUTLINE_DATA'
              'ENFORCE'
              'ENFORCED'
              'ENQUEUE'
              'ENTERPRISE'
              'ENTRY'
              'ERROR'
              'ERROR_ON_OVERLAP_TIME'
              'ERRORS'
              'ESCAPE'
              'ESTIMATE'
              'EVALNAME'
              'EVALUATION'
              'EVENTS'
              'EXCEPT'
              'EXCEPTION'
              'EXCEPTION_INIT'
              'EXCEPTIONS'
              'EXCHANGE'
              'EXCLUDING'
              'EXCLUSIVE'
              'EXEC'
              'EXECUTE'
              'EXEMPT'
              'EXISTS'
              'EXIT'
              'EXP'
              'EXPAND_GSET_TO_UNION'
              'EXPIRE'
              'EXPLAIN'
              'EXPLOSION'
              'EXPORT'
              'EXPR_CORR_CHECK'
              'EXTEND'
              'EXTENDS'
              'EXTENT'
              'EXTENTS'
              'EXTERNAL'
              'EXTERNALLY'
              'EXTRACT'
              'FACT'
              'FAILED'
              'FAILED_LOGIN_ATTEMPTS'
              'FAILGROUP'
              'FALSE'
              'FAST'
              'FBTSCAN'
              'FETCH'
              'FIC_CIV'
              'FIC_PIV'
              'FILE'
              'FILESYSTEM_LIKE_LOGGING'
              'FILTER'
              'FINAL'
              'FINE'
              'FINISH'
              'FIRST'
              'FIRST_ROWS'
              'FLAGGER'
							'FLASH_CACHE'
              'FLASHBACK'
              'FLOAT'
              'FLOB'
              'FLOOR'
              'FLUSH'
              'FOLLOWING'
              'FOR'
              'FORALL'
              'FORCE'
              'FORCE_XML_QUERY_REWRITE'
              'FOREIGN'
              'FORM'
              'FORTRAN'
              'FORWARD'
              'FOUND'
              'FREELIST'
              'FREELISTS'
              'FREEPOOLS'
              'FRESH'
              'FROM'
              'FULL'
              'FUNCTION'
              'FUNCTIONS'
              'G'
              'GATHER_PLAN_STATISTICS'
              'GBY_CONC_ROLLUP'
              'GENERATED'
              'GENERIC'
              'GET'
              'GLOBAL'
              'GLOBAL_NAME'
              'GLOBAL_TOPIC_ENABLED'
              'GLOBALLY'
              'GO'
              'GOTO'
              'GRANT'
              'GREATEST'
              'GROUP'
              'GROUP_BY'
              'GROUPING'
              'GROUPS'
              'GUARANTEE'
              'GUARANTEED'
              'GUARD'
              'HASH'
              'HASH_AJ'
              'HASH_SJ'
              'HASHKEYS'
              'HAVING'
              'HEADER'
              'HEAP'
              'HELP'
              'HEXTORAW'
              'HIERARCHY'
              'HIGH'
              'HINTSET_BEGIN'
              'HINTSET_END'
              'HOST'
              'HOUR'
              'HWM_BROKERED'
              'ID'
              'IDENTIFIED'
              'IDENTIFIER'
              'IDENTITY'
              'IDGENERATORS'
              'IDLE_TIME'
              'IF'
              'IGNORE'
              'IGNORE NAV'
              'IGNORE_OPTIM_EMBEDDED_HINTS'
              'IGNORE_WHERE_CLAUSE'
              'IMMEDIATE'
              'IMPORT'
              'IN'
              'IN_MEMORY_METADATA'
              'INCLUDE_VERSION'
              'INCLUDING'
              'INCREMENT'
              'INCREMENTAL'
              'INDEX'
              'INDEX_ASC'
              'INDEX_COMBINE'
              'INDEX_DESC'
              'INDEX_FFS'
              'INDEX_FILTER'
              'INDEX_JOIN'
              'INDEX_ROWS'
              'INDEX_RRS'
              'INDEX_SCAN'
              'INDEX_SKIP_SCAN'
              'INDEX_SS'
              'INDEX_SS_ASC'
              'INDEX_SS_DESC'
              'INDEX_STATS'
              'INDEXED'
              'INDEXES'
              'INDEXTYPE'
              'INDEXTYPES'
              'INDICATOR'
              'INFINITE'
              'INFORMATIONAL'
              'INITCAP'
              'INITIAL'
              'INITIALIZED'
              'INITIALLY'
              'INITRANS'
              'INLINE'
              'INLINE_XMLTYPE_NT'
              'INNER'
              'INPUT'
              'INSERT'
              'INSERTING'
              'INSTANCE'
              'INSTANCES'
              'INSTANTIABLE'
              'INSTANTLY'
              'INSTEAD'
              'INSTR'
              'INSTRB'
              'INT'
              'INTEGER'
              'INTEGRITY'
              'INTERFACE'
              'INTERMEDIATE'
              'INTERNAL_CONVERT'
              'INTERNAL_USE'
              'INTERPRETED'
              'INTERSECT'
              'INTERVAL'
              'INTO'
              'INVALID_CURSOR'
              'INVALID_NUMBER'
              'INVALIDATE'
              'INVISIBLE'
              'IS'
              'IS A SET'
              'IS ANY'
              'IS EMPTY'
              'IS PRESENT'
              'ISOLATION'
              'ISOLATION_LEVEL'
              'ITERATE'
              'ITERATION_NUMBER'
              'JAVA'
              'JOB'
              'JOIN'
              'K'
              'KEEP'
              'KEEP_DUPLICATES'
              'KERBEROS'
              'KEY'
              'KEY_LENGTH'
              'KEYFILE'
              'KEYS'
              'KEYSIZE'
              'KILL'
              'LABEL'
              'LANGUAGE'
              'LAST'
              'LAST_DAY'
              'LATERAL'
              'LAYER'
              'LDAP_REG_SYNC_INTERVAL'
              'LDAP_REGISTRATION'
              'LDAP_REGISTRATION_ENABLED'
              'LEADING'
              'LEAST'
              'LEFT'
              'LENGTH'
              'LENGTHB'
              'LESS'
              'LEVEL'
              'LEVELS'
              'LIBRARY'
              'LIKE'
              'LIKE_EXPAND'
              'LIKE2'
              'LIKE4'
              'LIKEC'
              'LIMIT'
              'LIMITED'
              'LINK'
              'LIST'
              'LISTS'
              'LN'
              'LOB'
              'LOCAL'
              'LOCAL_INDEXES'
              'LOCALTIME'
              'LOCALTIMESTAMP'
              'LOCATION'
              'LOCATOR'
              'LOCK'
              'LOCKED'
              'LOG'
              'LOGFILE'
              'LOGGING'
              'LOGICAL'
              'LOGICAL_READS_PER_CALL'
              'LOGICAL_READS_PER_SESSION'
              'LOGIN_DENIED'
              'LOGOFF'
              'LOGON'
              'LONG'
              'LOOP'
              'LOWER'
              'LPAD'
              'LTRIM'
              'M'
              'MAIN'
              'MAKE_REF'
              'MANAGE'
              'MANAGED'
              'MANAGEMENT'
              'MANUAL'
              'MAPPING'
              'MASTER'
              'MATCHED'
              'MATERIALIZE'
              'MATERIALIZED'
              'MAX'
              'MAXARCHLOGS'
              'MAXDATAFILES'
              'MAXEXTENTS'
              'MAXIMIZE'
              'MAXINSTANCES'
              'MAXLOGFILES'
              'MAXLOGHISTORY'
              'MAXLOGMEMBERS'
              'MAXSIZE'
              'MAXTRANS'
              'MAXVALUE'
              'MEASURES'
              'MEDIAN'
              'MEDIUM'
              'MEMBER'
              'MEMORY'
              'MERGE'
              'MERGE_AJ'
              'MERGE_CONST_ON'
              'MERGE_SJ'
              'METHOD'
              'MIGRATE'
              'MIN'
              'MINEXTENTS'
              'MINIMIZE'
              'MINIMUM'
              'MINUS'
              'MINUS_NULL'
              'MINUTE'
              'MINVALUE'
              'MIRROR'
              'MLSLABEL'
              'MOD'
              'MODE'
              'MODEL'
              'MODEL_COMPILE_SUBQUERY'
              'MODEL_DONTVERIFY_UNIQUENESS'
              'MODEL_DYNAMIC_SUBQUERY'
              'MODEL_MIN_ANALYSIS'
              'MODEL_NO_ANALYSIS'
              'MODEL_PBY'
              'MODEL_PUSH_REF'
              'MODIFY'
              'MONITORING'
              'MONTH'
              'MONTHS_BETWEEN'
              'MOUNT'
              'MOVE'
              'MOVEMENT'
              'MTS_DISPATCHERS'
              'MULTISET'
              'MV_MERGE'
              'NAME'
              'NAMED'
              'NAN'
              'NANVL'
              'NATIONAL'
              'NATIVE'
              'NATURAL'
              'NATURALN'
              'NAV'
              'NCHAR'
              'NCHAR_CS'
              'NCLOB'
              'NEEDED'
              'NESTED'
              'NESTED_TABLE_FAST_INSERT'
              'NESTED_TABLE_GET_REFS'
              'NESTED_TABLE_ID'
              'NESTED_TABLE_SET_REFS'
              'NESTED_TABLE_SET_SETID'
              'NETWORK'
              'NEVER'
              'NEW'
              'NEW_TIME'
              'NEXT'
              'NEXT_DAY'
              'NEXTVAL'
              'NL_AJ'
              'NL_SJ'
              'NLS_CALENDAR'
              'NLS_CHARACTERSET'
              'NLS_CHARSET_DECL_LEN'
              'NLS_CHARSET_ID'
              'NLS_CHARSET_NAME'
              'NLS_COMP'
              'NLS_CURRENCY'
              'NLS_DATE_FORMAT'
              'NLS_DATE_LANGUAGE'
              'NLS_INITCAP'
              'NLS_ISO_CURRENCY'
              'NLS_LANG'
              'NLS_LANGUAGE'
              'NLS_LENGTH_SEMANTICS'
              'NLS_LOWER'
              'NLS_NCHAR_CONV_EXCP'
              'NLS_NUMERIC_CHARACTERS'
              'NLS_SORT'
              'NLS_SPECIAL_CHARS'
              'NLS_TERRITORY'
              'NLS_UPPER'
              'NLSSORT'
              'NO'
              'NO_ACCESS'
              'NO_BASETABLE_MULTIMV_REWRITE'
              'NO_BUFFER'
              'NO_CARTESIAN'
              'NO_CONNECT_BY_COST_BASED'
              'NO_CONNECT_BY_FILTERING'
              'NO_CPU_COSTING'
              'NO_DATA_FOUND'
              'NO_ELIMINATE_JOIN'
              'NO_ELIMINATE_OBY'
              'NO_ELIMINATE_OUTER_JOIN'
              'NO_EXPAND'
              'NO_EXPAND_GSET_TO_UNION'
              'NO_FACT'
              'NO_FILTERING'
              'NO_INDEX'
              'NO_INDEX_FFS'
              'NO_INDEX_SS'
              'NO_MERGE'
              'NO_MODEL_PUSH_REF'
              'NO_MONITORING'
              'NO_MULTIMV_REWRITE'
              'NO_ORDER_ROLLUPS'
              'NO_PARALLEL'
              'NO_PARALLEL_INDEX'
              'NO_PARTIAL_COMMIT'
              'NO_PRUNE_GSETS'
              'NO_PULL_PRED'
              'NO_PUSH_PRED'
              'NO_PUSH_SUBQ'
              'NO_PX_JOIN_FILTER'
              'NO_QKN_BUFF'
              'NO_QUERY_TRANSFORMATION'
              'NO_REF_CASCADE'
              'NO_REWRITE'
              'NO_SEMIJOIN'
              'NO_SET_TO_JOIN'
              'NO_SQL_TUNE'
              'NO_STAR_TRANSFORMATION'
              'NO_STATS_GSETS'
              'NO_SWAP_JOIN_INPUTS'
              'NO_TEMP_TABLE'
              'NO_UNNEST'
              'NO_USE_HASH'
              'NO_USE_HASH_AGGREGATION'
              'NO_USE_MERGE'
              'NO_USE_NL'
              'NO_XML_QUERY_REWRITE'
              'NOAPPEND'
              'NOARCHIVELOG'
              'NOAUDIT'
              'NOCACHE'
              'NOCOMPRESS'
              'NOCOPY'
              'NOCPU_COSTING'
              'NOCYCLE'
              'NODELAY'
              'NOFORCE'
              'NOGUARANTEE'
              'NOLOGGING'
              'NOMAPPING'
              'NOMAXVALUE'
              'NOMINIMIZE'
              'NOMINVALUE'
              'NOMONITORING'
              'NOMOUNT'
              'NONE'
              'NONSCHEMA'
              'NOORDER'
              'NOOVERRIDE'
              'NOPARALLEL'
              'NOPARALLEL_INDEX'
              'NORELY'
              'NOREPAIR'
              'NORESETLOGS'
              'NOREVERSE'
              'NOREWRITE'
              'NORMAL'
              'NOROWDEPENDENCIES'
              'NOSEGMENT'
              'NOSORT'
              'NOSTRICT'
              'NOSTRIPE'
              'NOSWITCH'
              'NOT'
              'NOT_LOGGED_ON'
              'NOTFOUND'
              'NOTHING'
              'NOTIFICATION'
              'NOVALIDATE'
              'NOWAIT'
              'NULL'
              'NULLIF'
              'NULLS'
              'NUMBER'
              'NUMBER_BASE'
              'NUMERIC'
              'NVARCHAR'
              'NVARCHAR2'
              'NVL'
              'OBJECT'
              'OBJNO'
              'OBJNO_REUSE'
              'OCIROWID'
              'OF'
              'OFF'
              'OFFLINE'
              'OID'
              'OIDINDEX'
              'OLD'
              'OLD_PUSH_PRED'
              'ON'
              'ONLINE'
              'ONLY'
              'OPAQUE'
              'OPAQUE_TRANSFORM'
              'OPAQUE_XCANONICAL'
              'OPCODE'
              'OPEN'
              'OPERATIONS'
              'OPERATOR'
              'OPT_ESTIMATE'
              'OPT_PARAM'
              'OPTIMAL'
              'OPTIMIZER_FEATURES_ENABLE'
              'OPTIMIZER_GOAL'
              'OPTION'
              'OR'
              'OR_EXPAND'
              'ORA_HASH'
              'ORA_ROWSCN'
              'ORDER'
              'ORDERED'
              'ORDERED_PREDICATES'
              'ORDINALITY'
              'ORGANIZATION'
              'OSERROR'
              'OTHERS'
              'OUT'
              'OUT_OF_LINE'
              'OUTER'
              'OUTLINE'
              'OUTLINE_LEAF'
              'OVER'
              'OVERFLOW'
              'OVERFLOW_NOMOVE'
              'OVERLAPS'
              'OWN'
              'P'
              'PACKAGE'
              'PACKAGES'
              'PARALLEL'
              'PARALLEL_INDEX'
              'PARAMETERS'
              'PARENT'
              'PARITY'
              'PARTIALLY'
              'PARTITION'
              'PARTITION_HASH'
              'PARTITION_LIST'
              'PARTITION_RANGE'
              'PARTITIONS'
              'PASSING'
              'PASSWORD'
              'PASSWORD_GRACE_TIME'
              'PASSWORD_LIFE_TIME'
              'PASSWORD_LOCK_TIME'
              'PASSWORD_REUSE_MAX'
              'PASSWORD_REUSE_TIME'
              'PASSWORD_VERIFY_FUNCTION'
              'PATH'
              'PATHS'
              'PAUSE'
              'PCTFREE'
              'PCTINCREASE'
              'PCTTHRESHOLD'
              'PCTUSED'
              'PCTVERSION'
              'PERCENT'
              'PERFORMANCE'
              'PERMANENT'
              'PFILE'
              'PHYSICAL'
              'PIV_GB'
              'PIV_SSF'
              'PLAN'
              'PLI'
              'PLS_INTEGER'
              'PLSQL_CCFLAGS'
              'PLSQL_CODE_TYPE'
              'PLSQL_DEBUG'
              'PLSQL_OPTIMIZE_LEVEL'
              'PLSQL_WARNINGS'
              'POINT'
              'POLICY'
              'POSITIVE'
              'POSITIVEN'
              'POST_TRANSACTION'
              'POWER'
              'POWERMULTISET'
              'POWERMULTISET_BY_CARDINALITY'
              'PQ_DISTRIBUTE'
              'PQ_MAP'
              'PQ_NOMAP'
              'PRAGMA'
              'PREBUILT'
              'PRECEDING'
              'PRECISION'
              'PRECOMPUTE_SUBQUERY'
              'PREPARE'
              'PRESENT'
              'PRESENTNNV'
              'PRESENTV'
              'PRESERVE'
              'PRESERVE_OID'
              'PREVIOUS'
              'PRIMARY'
              'PRINT'
              'PRIOR'
              'PRIVATE'
              'PRIVATE_SGA'
              'PRIVILEGE'
              'PRIVILEGES'
              'PROCEDURE'
              'PROFILE'
              'PROGRAM'
              'PROGRAM_ERROR'
              'PROJECT'
              'PROMPT'
              'PROTECTED'
              'PROTECTION'
              'PUBLIC'
              'PULL_PRED'
              'PURGE'
              'PUSH_PRED'
              'PUSH_SUBQ'
              'PX_GRANULE'
              'PX_JOIN_FILTER'
              'QB_NAME'
              'QUERY'
              'QUERY_BLOCK'
              'QUEUE'
              'QUEUE_CURR'
              'QUEUE_ROWP'
              'QUIESCE'
              'QUOTA'
              'RAISE'
              'RAISE_APPLICATION_ERROR'
              'RANDOM'
              'RANGE'
              'RAPIDLY'
              'RAW'
              'RAWTOHEX'
              'RBA'
              'RBO_OUTLINE'
              'READ'
              'READS'
              'REAL'
              'REBALANCE'
              'REBUILD'
              'RECORD'
              'RECORDS_PER_BLOCK'
              'RECOVER'
              'RECOVERABLE'
              'RECOVERY'
              'RECYCLE'
              'RECYCLEBIN'
              'REDUCED'
              'REDUNDANCY'
              'REF'
              'REF_CASCADE_CURSOR'
              'REFERENCE'
              'REFERENCED'
              'REFERENCES'
              'REFERENCING'
              'REFRESH'
              'REFTOHEX'
              'REGEXP_INSTR'
              'REGEXP_LIKE'
              'REGEXP_REPLACE'
              'REGEXP_SUBSTR'
              'REGISTER'
              'REJECT'
              'REKEY'
              'RELATIONAL'
              'release'
              'RELY'
              'rem'
              'REMAINDER'
              'REMARK'
              'REMOTE_MAPPED'
              'RENAME'
              'REPAIR'
              'REPLACE'
              'REQUIRED'
              'RESET'
              'RESETLOGS'
              'RESIZE'
              'RESOLVE'
              'RESOLVER'
              'RESOURCE'
              'RESTORE'
              'RESTORE_AS_INTERVALS'
              'RESTRICT'
              'RESTRICT_ALL_REF_CONS'
              'RESTRICT_REFERENCES'
              'RESTRICTED'
							'RESULT_CACHE'
              'RESUMABLE'
              'RESUME'
              'RETENTION'
              'RETURN'
              'RETURNING'
              'REUSE'
              'REVERSE'
              'REVOKE'
              'REWRITE'
              'REWRITE_OR_ERROR'
              'RIGHT'
              'rnds'
              'rnps'
              'ROLE'
              'ROLES'
              'ROLLBACK'
              'ROLLING'
              'ROLLUP'
              'ROUND'
              'ROW'
              'ROW_LENGTH'
              'rowcount'
              'ROWDEPENDENCIES'
              'ROWID'
              'ROWIDTOCHAR'
              'ROWLABEL'
              'ROWNUM'
              'ROWS'
              'ROWTYPE'
              'RPAD'
              'RTRIM'
              'RULE'
              'RULES'
              'RUN'
              'RUNFORM'
              'SALT'
              'SAMPLE'
              'SAVE'
              'SAVE_AS_INTERVALS'
              'SAVEPOINT'
              'SB4'
              'SCALE'
              'SCALE_ROWS'
              'SCAN'
              'SCAN_INSTANCES'
              'SCHEDULER'
              'SCHEMA'
              'SCN'
              'SCN_ASCENDING'
              'SCN_TO_TIMESTAMP'
              'SCOPE'
              'SD_ALL'
              'SD_INHIBIT'
              'SD_SHOW'
              'SECOND'
              'SECTION'
              'SECUREFILE'
              'SECURITY'
              'SEED'
              'SEG_BLOCK'
              'SEG_FILE'
              'SEGMENT'
              'SELECT'
              'SELECTIVITY'
              'SEMIJOIN'
              'SEMIJOIN_DRIVER'
              'SEPARATE'
              'SEQUENCE'
              'SEQUENCED'
              'SEQUENTIAL'
              'SEQUENTUAL'
              'SERIALIZABLE'
              'SERVERERROR'
              'SESSION'
              'SESSION_CACHED_CURSORS'
              'SESSIONS_PER_USER'
              'SESSIONTIMEZONE'
              'SESSIONTZNAME'
              'SET'
              'SET_TO_JOIN'
              'SET_TRANSACTION_USE'
              'SETS'
              'SETTINGS'
              'SEVERE'
              'SHARE'
              'SHARED'
              'SHARED_POOL'
              'SHOW'
              'SHRINK'
              'SHUTDOWN'
              'SIBLINGS'
              'SID'
              'SIGN'
              'SIMPLE'
              'SIN'
              'SINGLE'
              'SINGLE REFERENCE'
              'SINGLETASK'
              'SINH'
              'SIZE'
              'SKIP'
              'SKIP_EXT_OPTIMIZER'
              'SKIP_UNQ_UNUSABLE_IDX'
              'SKIP_UNUSABLE_INDEXES'
              'SMALLFILE'
              'SMALLINT'
              'SNAPSHOT'
              'SOME'
              'SORT'
              'SOUNDEX'
              'SOURCE'
              'SPACE'
              'SPECIFICATION'
              'SPFILE'
              'SPLIT'
              'spo'
              'SPOOL'
              'SPREADSHEET'
              'SQL'
              'SQL_TRACE'
              'SQLBUF'
              'SQLCODE'
              'SQLERRM'
              'SQLERROR'
              'SQLLDR'
              'SQLPLUS'
              'SQLSTATE'
              'SQRT'
              'STA'
              'STANDALONE'
              'STANDBY'
              'STAR'
              'STAR_TRANSFORMATION'
              'START'
              'STARTUP'
              'STATEMENT'
              'STATEMENT_ID'
              'STATIC'
              'STATISTICS'
              'STATS_BINOMIAL_TEST'
              'STATS_CROSSTAB'
              'STATS_F_TEST'
              'STATS_KS_TEST'
              'STATS_MODE'
              'STATS_MW_TEST'
              'STATS_ONE_WAY_ANOVA'
              'STATS_T_TEST_INDEP'
              'STATS_T_TEST_INDEPU'
              'STATS_T_TEST_ONE'
              'STATS_T_TEST_PAIRED'
              'STATS_WSR_TEST'
              'STDDEV'
              'STOP'
              'STORAGE'
              'STORAGE_ERROR'
              'STORE'
              'STREAMS'
              'STRICT'
              'STRING'
              'STRIP'
              'STRIPE'
              'STRUCTURE'
              'SUBMULTISET'
              'SUBPARTITION'
              'SUBPARTITION_REL'
              'SUBPARTITIONS'
              'SUBQUERIES'
              'SUBSCRIPT_BEYOND_COUNT'
              'SUBSCRIPT_OUTSIDE_LIMIT'
              'SUBSTITUTABLE'
              'SUBSTR'
              'SUBSTRB'
              'SUBTYPE'
              'SUCCESSFUL'
              'SUM'
              'SUMMARY'
              'SUPPLEMENTAL'
              'SUSPEND'
              'SWAP_JOIN_INPUTS'
              'SWITCH'
              'SWITCHOVER'
              'SYNONYM'
              'SYS_CONNECT_BY_PATH'
              'SYS_DL_CURSOR'
              'SYS_FBT_INSDEL'
              'SYS_OP_BITVEC'
              'SYS_OP_CAST'
              'SYS_OP_COL_PRESENT'
              'SYS_OP_ENFORCE_NOT_NULL$'
              'SYS_OP_EXTRACT'
              'SYS_OP_MINE_VALUE'
              'SYS_OP_NOEXPAND'
              'SYS_OP_NTCIMG$'
              'SYS_PARALLEL_TXN'
              'SYS_RID_ORDER'
              'SYS_XMLAGG'
              'SYS_XMLGEN'
              'SYSAUX'
              'SYSDATE'
              'SYSDBA'
              'SYSOPER'
              'SYSTEM'
              'SYSTIMESTAMP'
              'T'
              'TABAUTH'
              'TABLE'
              'TABLE_STATS'
              'TABLES'
              'TABLESPACE'
              'TABLESPACE_NO'
              'TABNO'
              'TAN'
              'TANH'
              'TASK'
              'TEMP_TABLE'
              'TEMPFILE'
              'TEMPLATE'
              'TEMPORARY'
              'TERMINATE'
              'TEST'
              'THAN'
              'THE'
              'THEN'
              'THREAD'
              'THROUGH'
              'TIME'
              'TIME_ZONE'
              'TIMEOUT'
              'TIMEOUT_ON_RESOURCE'
              'TIMESTAMP'
              'TIMEZONE_ABBR'
              'TIMEZONE_HOUR'
              'TIMEZONE_MINUTE'
              'TIMEZONE_OFFSET'
              'TIMEZONE_REGION'
              'TIMING'
              'TIV_GB'
              'TIV_SSF'
              'TO'
              'TO_BINARY_DOUBLE'
              'TO_BINARY_FLOAT'
              'TO_CHAR'
              'TO_DATE'
              'TO_MULTI_BYTE'
              'TO_NUMBER'
              'TO_SINGLE_BYTE'
              'TOO_MANY_ROWS'
              'TOPLEVEL'
              'TRACE'
              'TRACING'
              'TRACKING'
              'TRAILING'
              'TRANSACTION'
              'TRANSACTIONAL'
              'TRANSITIONAL'
              'TRANSLATE'
              'TREAT'
              'TRIGGER'
              'TRIGGERS'
              'TRUE'
              'TRUNC'
              'TRUNCATE'
              'TRUSTED'
              'TTITLE'
              'TUNING'
              'TX'
              'TYPE'
              'TYPES'
              'TZ_OFFSET'
              'U'
              'UB2'
              'UBA'
              'UI'
              'UID'
              'UNARCHIVED'
              'UNBOUND'
              'UNBOUNDED'
              'UNDEF'
              'UNDEFINE'
              'UNDER'
              'UNDO'
              'UNDROP'
              'UNIFORM'
              'UNION'
              'UNIQUE'
              'UNLIMITED'
              'UNLOCK'
              'UNNEST'
              'UNPACKED'
              'UNPROTECTED'
              'UNQUIESCE'
              'UNRECOVERABLE'
              'UNTIL'
              'UNUSABLE'
              'UNUSED'
              'UPD_INDEXES'
              'UPD_JOININDEX'
              'UPDATABLE'
              'UPDATE'
              'UPDATED'
              'UPDATING'
              'UPGRADE'
              'UPPER'
              'UPSERT'
              'UROWID'
              'USAGE'
              'USE'
              'USE_ANTI'
              'USE_CONCAT'
              'USE_HASH'
              'USE_HASH_AGGREGATION'
              'USE_MERGE'
              'USE_NL'
              'USE_NL_WITH_INDEX'
              'USE_PRIVATE_OUTLINES'
              'USE_SEMI'
              'USE_STORED_OUTLINES'
              'USE_TTT_FOR_GSETS'
              'USE_WEAK_NAME_RESL'
              'USER'
              'USER_DEFINED'
              'USER_RECYCLEBIN'
              'USERENV'
              'USERS'
              'USING'
              'VALIDATE'
              'VALIDATION'
              'VALUE'
              'VALUE_ERROR'
              'VALUES'
              'VARCHAR'
              'VARCHAR2'
              'VARIABLE'
              'VARIANCE'
              'VARRAY'
              'VARYING'
              'VECTOR_READ'
              'VECTOR_READ_TRACE'
              'VERSION'
              'VERSIONS'
              'VIEW'
              'VIEWS'
              'VISIBLE'
              'VSIZE'
              'WAIT'
              'WALLET'
              'WELLFORMED'
              'WHEN'
              'WHENEVER'
              'WHERE'
              'WHILE'
              'WHITESPACE'
              'WITH'
              'WITHIN'
              'WITHOUT'
              'WNDS'
              'WNPS'
              'WORK'
              'WRAPPED'
              'WRITE'
              'X_DYN_PRUNE'
              'XID'
              'XML'
              'XMLATTRIBUTES'
              'XMLCOLATTVAL'
              'XMLELEMENT'
              'XMLFOREST'
              'XMLNAMESPACES'
              'XMLPARSE'
              'XMLPI'
              'XMLQUERY'
              'XMLROOT'
              'XMLSCHEMA'
              'XMLSERIALIZE'
              'XMLTABLE'
              'XMLTYPE'
              'YEAR'
              'YES'
              'ZERO_DIVIDE'
              'ZONE')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'SQL*Plus Commands'
        StyleName = 'SQL*Plus Meta Commands'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '@'
              '@@'
              'ABORT'
              'ACC'
              'ACCEPT'
              'APPEND'
              'BREAK'
              'BTITLE'
              'CHANGE'
              'CLEAR'
              'COLUMN'
              'COMPUTE'
              'CONNECT'
              'COPY'
              'DEF'
              'DEFINE'
              'DEFINE_EDITOR'
              'DEL'
              'DESC'
              'DESCRIBE'
              'DISCONNECT'
              'EDIT'
              'EXEC'
              'EXECUTE'
              'EXIT'
              'GET'
              'HELP'
              'HOST'
              'IMMEDIATE'
              'INPUT'
              'LIST'
              'MOUNT'
              'NOMOUNT'
              'NORMAL'
              'OFF'             
              'OSERROR'
              'PAUSE'
              'PRINT'
              'PROMPT'
              'REM'
              'REMARK'
              'RUN'
              'RUNFORM'
              'SAVE'
              'SET'
              'SHOW'
              'SHUTDOWN'
              'SPO'
              'SPOOL'
              'SQLERROR'
              'SQLPLUS'
              'STA'
              'START'
              'STARTUP'
              'TIMING'
              'TRANSACTIONAL'
              'TTITLE'
              'UNDEF'
              'UNDEFINE'
              'VARIABLE'
              'WHENEVER')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'SQL Functions'
        StyleName = 'SQL Functions'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abs'
              'acos'
              'add_months'
              'ascii'
              'asciistr'
              'asin'
              'atan'
              'atan2'
              'avg'
              'bfilename'
              'bin_to_num'
              'bitand'
              'cast'
              'ceil'
              'chartorowid'
              'chr'
              'coalesce'
              'compose'
              'concat'
              'convert'
              'corr'
              'cos'
              'cosh'
              'count'
              'covar_pop'
              'covar_samp'
              'cume_dist'
              'current_date'
              'current_timestamp'
              'dbtimezone'
              'decode'
              'decompose'
              'dense_rank'
              'depth'
              'deref'
              'dump'
              'empty_blob'
              'empty_clob'
              'existsnode'
              'exp'
              'extract'
              'extractvalue'
              'first'
              'floor'
              'from_tz'
              'greatest'
              'group_id'
              'grouping'
              'grouping_id'
              'hextoraw'
              'initcap'
              'instr'
              'last'
              'last_day'
              'least'
              'length'
              'ln'
              'localtimestamp'
              'log'
              'lower'
              'lpad'
              'ltrim'
              'make_ref'
              'max'
              'min'
              'mod'
              'months_between'
              'new_time'
              'next_day'
              'nls_charset_decl_len'
              'nls_charset_id'
              'nls_charset_name'
              'nls_initcap'
              'nls_lower'
              'nls_upper'
              'nlssort'
              'nullif'
              'numtodsinterval'
              'numtoyminterval'
              'nvl'
              'nvl2'
              'path'
              'percent_rank'
              'percentile_cont'
              'percentile_disc'
              'power'
              'rank'
              'rawtohex'
              'rawtonhex'
              'ref'
              'reftohex'
              'regr_avgx'
              'regr_avgy'
              'regr_count'
              'regr_intercept'
              'regr_r2'
              'regr_slope'
              'regr_sxx'
              'regr_sxystddev'
              'regr_syy'             
              'round'
              'rowidtochar'
              'rowidtonchar'
              'rpad'
              'rtrim'
              'sessiontimezone'
              'sign'
              'sin'
              'sinh'
              'soundex'
              'sqrt'
              'stddev'
              'stddev_pop'
              'stddev_samp'
              'substr'
              'sum'
              'sys_connect_by_path'
              'sys_context'
              'sys_dburigen'
              'sys_extract_utc'
              'sys_guid'
              'sys_typeid'
              'sys_xmlagg'
              'sys_xmlgen'
              'sysdate'
              'systimestamp'
              'tan'
              'tanh'
              'to_char'
              'to_clob'
              'to_date'
              'to_dsinterval'
              'to_lob'
              'to_multi_byte'
              'to_nchar'
              'to_nclob'
              'to_number'
              'to_single_byte'
              'to_timestamp'
              'to_timestamp_tz'
              'to_yminterval'
              'translate'
              'treat'
              'trim'
              'trunc'
              'tz_offset'
              'uid'
              'unistr'
              'updatexml'
              'upper'
              'user'
              'userenv'
              'using'
              'value'
              'var_pop'
              'var_samp'
              'variance'
              'vsize'
              'width_bucket'
              'xmlagg'
              'xmlcolattval'
              'xmlconcat'
              'xmlforest'
              'xmlsequence'
              'xmltransform')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Default Oracle Packages'
        StyleName = 'Default Oracle Packages'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'dbms_alert'
              'dbms_application_info'
              'dbms_aq'
              'dbms_aqadm'
              'dbms_aqelm'
              'dbms_backup_restore'
              'dbms_ddl'
              'dbms_debug'
              'dbms_defer'
              'dbms_defer_query'
              'dbms_describe'
              'dbms_distributed_trust_admin'
              'dbms_fga'
              'dbms_hs_passthrough'
              'dbms_iot'
              'dbms_job'
              'dbms_ldap'
              'dbms_libcache'
              'dbms_lob'
              'dbms_lock'
              'dbms_logmnr'
              'dbms_logmnr_cdc_publish'
              'dbms_logmnr_cdc_subscribe'
              'dbms_logmnr_d'
              'dbms_metadata'
              'dbms_mview'
              'dbms_obfuscation_toolkit'
              'dbms_odci'
              'dbms_offline_og'
              'dbms_offline_snapshot'
              'dbms_olap'
              'dbms_oracle_trace_agent'
              'dbms_oracle_trace_user'
              'dbms_outln'
              'dbms_outln_edit'
              'dbms_output'
              'dbms_pclxutil'
              'dbms_pipe'
              'dbms_profiler'
              'dbms_random'
              'dbms_rectifier_diff'
              'dbms_redefinition'
              'dbms_refresh'
              'dbms_repair'
              'dbms_repcat'
              'dbms_repcat_admin'
              'dbms_repcat_instatiate'
              'dbms_repcat_rgt'
              'dbms_reputil'
              'dbms_resource_manager'
              'dbms_resource_manager_privs'
              'dbms_resumable'
              'dbms_rls'
              'dbms_rowid'
              'dbms_session'
              'dbms_shared_pool'
              'dbms_snapshot'
              'dbms_space'
              'dbms_space_admin'
              'dbms_sql'
              'dbms_standard'
              'dbms_stats'
              'dbms_trace'
              'dbms_transaction'
              'dbms_transform'
              'dbms_tts'
              'dbms_types'
              'dbms_utility'
              'dbms_wm'
              'dbms_xmlgen'
              'dbms_xmlsave'
              'debug_extproc'
              'deleting'
              'dbms_defer_sys'
              'dbms_flashback'
              'dbms_xmlquery'             
              'outln_pkg'
              'plitblm'
              'raise_application_error'
              'sdo_cs'
              'sdo_geom'
              'sdo_lrs'
              'sdo_migrate'
              'sdo_tune'
              'set_transaction_use'
              'standard'
              'utl_coll'
              'utl_encode'
              'utl_file'
              'utl_http'
              'utl_inaddr'
              'utl_pg'
              'utl_raw'
              'utl_ref'
              'utl_smtp'
              'utl_tcp'
              'utl_url')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Predefined Exceptions'
        StyleName = 'Predefined Exceptions'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'access_into_null'
              'collection_is_null'
              'cursor_already_open'
              'dbms_lob.access_error'
              'dbms_lob.invalid_directory'
              'dbms_lob.noexist_directory'
              'dbms_lob.nopriv_directory'
              'dbms_lob.open_toomany'
              'dbms_lob.operation_failed'
              'dbms_lob.unopened_file'
              'dbms_sql.inconsistent_type'
              'dup_val_on_index'
              'invalid_cursor'
              'invalid_number'
              'login_denied'
              'no_data_found'
              'not_logged_on'
              'others'
              'program_error'
              'storage_error'
              'subscript_beyond_count'
              'subscript_outside_limit'
              'timeout_on_resource'
              'too_many_rows'
              'utl_file.internal_error'
              'utl_file.invalid_filehandle'
              'utl_file.invalid_mode'
              'utl_file.invalid_operation'
              'utl_file.invalid_path'
              'utl_file.read_error'
              'utl_file.write_error'
              'value_error'
              'zero_divide')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'ToadFold'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '/*startfold*/')
            TokenTypes = 2
            IgnoreCase = True
          end>
        BlockEnd = 'ToadFold <end>'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = ' %s-1'
      end
      item
        DisplayName = 'ToadFold <end>'
        BlockName = 'ToadFold'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/*endfold*/')
            TokenTypes = 2
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Comment'
        BlockName = 'Comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment <end>'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = 'Comments...'
      end
      item
        DisplayName = 'Comment <end>'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1021
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Constant'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'constant')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = 1
        BlockEnd = 'Constant <end>'
        NotCollapsed = True
        NameFmt = '%s1 %s-1'
        GroupFmt = 'Constants'
        HighlightPos = cpAny
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 4
        TreeGroupImage = 0
      end
      item
        DisplayName = 'Constant <end>'
        BlockName = 'Constant'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Case'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'case')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Case <end>'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0...'
      end
      item
        DisplayName = 'Case <end>'
        BlockName = 'Case'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Case'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'If'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'If <end>'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0...'
      end
      item
        DisplayName = 'If <end>'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'DML'
        BlockName = 'DML'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'cursor'
              'delete'
              'insert'
              'select'
              'update    ')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'DML <end>'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0...'
        TreeItemImage = 6
      end
      item
        DisplayName = 'DML <end>'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'DML'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'DDL (1)'
        ConditionList = <
          item
            TagList.Strings = (
              'cluster'
              'context'
              'dimension'
              'directory'
              'index'
              'library'
              'materialized'
              'profile'
              'public'
              'role'
              'rollback'
              'sequence'
              'table'
              'tablespace'
              'unique'
              'user'
              'view')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'DDL (1) <end>'
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1...'
      end
      item
        DisplayName = 'DDL (1) <end>'
        BlockName = 'DDL (1)'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/'
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'DDL (1)'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'DDL (2)'
        ConditionList = <
          item
            TagList.Strings = (
              'cluster'
              'context'
              'dimension'
              'directory'
              'index'
              'library'
              'materialized'
              'profile'
              'public'
              'role'
              'rollback'
              'sequence'
              'table'
              'tablespace'
              'unique'
              'user'
              'view')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'replace')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'or')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'DDL (2) <end>'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1 %s-2 %s-3...'
      end
      item
        DisplayName = 'DDL (2) <end>'
        BlockName = 'DDL (2)'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/'
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'DDL (2)'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Cursor Open'
        ConditionList = <
          item
            TagList.Strings = (
              'for')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'open')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Cursor Open <end>'
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        CollapseFmt = '...'
      end
      item
        DisplayName = 'Cursor Open <end>'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'Cursor Open'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'For'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'for'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'For <end>'
        DisplayInTree = False
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2...'
      end
      item
        DisplayName = 'For <end>'
        BlockName = 'For'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Loop'
        StyleName = 'Current block'
        BlockName = 'For'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Loop <end>'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0...'
      end
      item
        DisplayName = 'Loop <end>'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Function Separator'
        StyleName = 'Function separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = '()'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '( ... )'
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        BlockEnd = '('
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Exception'
        ConditionList = <
          item
            TagList.Strings = (
              'exception')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Exception <end>'
        DisplayInTree = False
        NameFmt = '%s0 %s-2'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'Exception <end>'
        BlockName = 'Exception'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Alter'
        ConditionList = <
          item
            TagList.Strings = (
              'alter')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Alter <end>'
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1...'
      end
      item
        DisplayName = 'Alter <end>'
        BlockName = 'Alter'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'Alter'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'begin')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Begin <end>'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0...'
      end
      item
        DisplayName = 'Begin <end>'
        BlockName = 'Begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'case'
              'if'
              'loop')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'PLSQL (1)'
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'package'
              'procedure'
              'trigger'
              'type')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'PLSQL <end>'
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1 %s-2...'
      end
      item
        DisplayName = 'PLSQL (2)'
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'java'
              'package'
              'procedure'
              'trigger'
              'type')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'replace')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'or')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'PLSQL <end>'
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4...'
      end
      item
        DisplayName = 'PLSQL <end>'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
            IgnoreCase = True
          end
          item
            CondType = tcSkip
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Java Source (1)'
        ConditionList = <
          item
            TagList.Strings = (
              'named')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'source')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'java')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Java Source <end>'
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1 %s-2...'
      end
      item
        DisplayName = 'Java Source (2)'
        ConditionList = <
          item
            TagList.Strings = (
              'named')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'source')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'java')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'replace')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'or')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Java Source <end>'
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4...'
      end
      item
        DisplayName = 'Java Source <end>'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/')
            TokenTypes = 8
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Package Procedure'
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create'
              'replace')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1...'
      end
      item
        DisplayName = 'Package Procedure (1) <end>'
        BlockName = 'Package Procedure'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Package Procedure'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Package Procedure (2) <end>'
        BlockName = 'Package Procedure'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'if'
              'loop')
            CondType = tcNotEqual
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Package Procedure'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Toad_Datatypes'
        StyleName = 'Toad_Datatypes'
        BlockType = btTagDetect
        ConditionList = <>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Toad_UserTables'
        StyleName = 'Toad_UserTables'
        BlockType = btTagDetect
        ConditionList = <>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Toad_UserViews'
        StyleName = 'Toad_UserViews'
        BlockType = btTagDetect
        ConditionList = <>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Toad_UserProcs'
        StyleName = 'Toad_UserProcs'
        BlockType = btTagDetect
        ConditionList = <>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Toad_SYSViews'
        StyleName = 'Toad_SYSViews'
        BlockType = btTagDetect
        ConditionList = <>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'Java'
        StartExpression = '(?i)(\bJAVA\b)(\s*?)(\bSOURCE\b)(\s*?)(\bNAMED\b)(s*?)(.+?)(\b(AS|IS)\b)'
        EndExpression = '(?-m)(\})(\s*?)(;?\s*?)((\/\s*?(\r|\n|$))|(\s*?$))'
        SyntAnalyzer = SyntAnal5
      end>
    SampleText.Strings = (
      '/* This calculates a nextdate for a defined interval.'
      
        '   The function works similar to the functionality in DBMS_JOB *' +
        '/'
      ''
      'FUNCTION calc_next_date ('
      '   i_interval   IN   VARCHAR2,'
      '   i_default    IN   DATE DEFAULT SYSDATE'
      ')'
      '   RETURN DATE'
      'IS'
      '   v_date        DATE;'
      '   v_statement   VARCHAR2 (5000);'
      'BEGIN'
      '   IF i_interval IS NULL'
      '   THEN'
      
        '      RETURN (i_default);  -- if no interval defined return the ' +
        'default value'
      '   ELSE'
      '      v_statement := '#39'SELECT '#39' || i_interval || '#39' FROM DUAL'#39';'
      ''
      '      EXECUTE IMMEDIATE v_statement'
      '                   INTO v_date;'
      ''
      '      RETURN (v_date);'
      '   END IF;'
      'EXCEPTION'
      '   WHEN OTHERS'
      '   THEN'
      '      -- if any error occurs, return the default value'
      '      RETURN (i_default);'
      'END calc_next_date;')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const')
    MarkedBlockStyle = 'Marked block'
    CurrentLineStyle = 'Current Line'
    DefaultStyleName = 'Default'
    Extentions = 'SQL FNC JAVA JVS PKB PKS PRC TPB TPS TRG VW PLS'
    LexerName = 'PL/SQL'
    RestartFromLineStart = True
    LineComment = '--'
    Left = 140
    Top = 160
  end
  object SyntAnalyzer9: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clInfoBk
        MultiLineBorder = True
      end
      item
        DisplayName = 'Tag bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Tag properties'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Unknown tag content'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Tag Key'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Bound'
        Enabled = False
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
        MultiLineBorder = True
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (attribute)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 14155775
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (tag)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?ms)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment end'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '# for use in <SCRIPT>'#13#10'-->'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '<[/!\-]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 11
        Expression = '>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 7
        Expression = '\#[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s)".*?("|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag ident'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^\s=>]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        BlockName = 'Tag begin'
        TokenType = 3
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Unknow tag content'
        StyleName = 'Unknown tag content'
        BlockName = 'Tag begin'
        Expression = '[^>]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '&...'
        StyleName = 'Tag Key'
        TokenType = 9
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        TokenType = 9
        Expression = '[^<&]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag keys'
        StyleName = 'Tag Key'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<'
              '</')
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag property'
        StyleName = 'Tag properties'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag property value'
        StyleName = 'Tag param'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Simple tag block'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'hr'
              'image'
              'img'
              'link')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 1024
          end>
        BlockEnd = 'Simple tag block end'
        HighlightPos = cpAny
        TreeItemStyle = 'Tree item (tag)'
      end
      item
        DisplayName = 'Simple tag block end'
        BlockName = 'Simple tag block'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag block begin'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'hr'
              'image'
              'img'
              'link')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<'
              '<!')
            TokenTypes = 1024
          end>
        BlockOffset = 1
        BlockEnd = 'Tag block end'
        HighlightPos = cpAny
        CollapseFmt = '< %s0 >'
        TreeItemStyle = 'Tree item (tag)'
      end
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 1024
          end>
        BlockOffset = -1
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Comment begin'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '<!--  ...  -->'
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag attribute'
        BlockName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0 %s-1 %s-2'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemStyle = 'Tree item (attribute)'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Text'
      'Open Tag'
      'Close Tag')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'htm html'
    LexerName = 'HTML Documents'
  end
  object SyntAnalyzer13: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Ident'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Integer'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'HEX'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'reserved words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Registers'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = ';.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Labels'
        StyleName = 'Label'
        Expression = '@+\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'HEX'
        TokenType = 7
        Expression = '[\da-f]+h'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Integer'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Ident'
        StyleName = 'Ident'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Registers'
        StyleName = 'Registers'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ah'
              'al'
              'ax'
              'bh'
              'bl'
              'bp'
              'bx'
              'ch'
              'cl'
              'cs'
              'cx'
              'dh'
              'di'
              'ds'
              'dx'
              'eax'
              'ebp'
              'ebx'
              'ecx'
              'edi'
              'edx'
              'eip'
              'es'
              'esc'
              'esi'
              'esp'
              'sp'
              'ss')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Reserved words'
        StyleName = 'reserved words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'aaa'
              'aad'
              'aam'
              'aas'
              'adc'
              'add'
              'and'
              'arpl'
              'assume'
              'bound'
              'bsf'
              'bsr'
              'bswap'
              'bt'
              'btc'
              'btr'
              'bts'
              'byte'
              'call'
              'cbw'
              'cdq'
              'clc'
              'cld'
              'cli'
              'clts'
              'cmc'
              'cmp'
              'cmps'
              'cmpsb'
              'cmpsd'
              'cmpsw'
              'cmpxchg'
              'comment'
              'cwd'
              'cwde'
              'daa'
              'das'
              'db'
              'dd'
              'dec'
              'div'
              'dl'
              'dq'
              'dt'
              'dw'
              'dword'
              'end'
              'endm'
              'endp'
              'ends'
              'enter'
              'eq'
              'equ'
              'exitm'
              'extrn'
              'f2xm1'
              'fabs'
              'fadd'
              'faddp'
              'far'
              'fbld'
              'fbstp'
              'fchs'
              'fclex'
              'fcom'
              'fcomp'
              'fcompp'
              'fcos'
              'fdecstp'
              'fdisi'
              'fdiv'
              'fdivp'
              'fdivr'
              'fdivrp'
              'feni'
              'ffree'
              'fiadd'
              'ficom'
              'ficomp'
              'fidiv'
              'fidivr'
              'fild'
              'fimul'
              'fincstp'
              'finit'
              'fist'
              'fistp'
              'fisub'
              'fisubr'
              'fld'
              'fld1'
              'fldcw'
              'fldenv'
              'fldl2e'
              'fldl2t'
              'fldlg2'
              'fldln2'
              'fldpi'
              'fldz'
              'fmul'
              'fmulp'
              'fnclex'
              'fndisi'
              'fneni'
              'fninit'
              'fnop'
              'fnsave'
              'fnstcw'
              'fnstenv'
              'fnstsw'
              'fpatan'
              'fprem'
              'fprem1'
              'fptan'
              'frndint'
              'frstor'
              'fs'
              'fsave'
              'fscale'
              'fsetpm'
              'fsin'
              'fsincos'
              'fsqrt'
              'fst'
              'fstcw'
              'fstenv'
              'fstp'
              'fstsw'
              'fsub'
              'fsubp'
              'fsubr'
              'fsubrp'
              'ftst'
              'fucom'
              'fucomp'
              'fucompp'
              'fwait'
              'fxam'
              'fxch'
              'fxtract'
              'fyl2x'
              'fyl2xp1'
              'ge'
              'group'
              'gs'
              'gt'
              'high'
              'hlt'
              'idiv'
              'imul'
              'in'
              'inc'
              'include'
              'insb'
              'insd'
              'insw'
              'int'
              'into'
              'invd'
              'invlpg'
              'iret'
              'iretd'
              'ja'
              'jae'
              'jb'
              'jbe'
              'jc'
              'jcxz'
              'je'
              'jecxz'
              'jg'
              'jge'
              'jl'
              'jle'
              'jmp'
              'jna'
              'jnae'
              'jnb'
              'jnbe'
              'jnc'
              'jne'
              'jng'
              'jnge'
              'jnl'
              'jnle'
              'jno'
              'jnp'
              'jns'
              'jnz'
              'jo'
              'jp'
              'jpe'
              'jpo'
              'js'
              'jz'
              'label'
              'lahf'
              'lar'
              'large'
              'lds'
              'le'
              'lea'
              'leave'
              'length'
              'les'
              'lfs'
              'lgdt'
              'lgs'
              'lidt'
              'lldt'
              'lmsw'
              'local'
              'lock'
              'lods'
              'lodsb'
              'lodsd'
              'lodsw'
              'loop'
              'loopd'
              'loopde'
              'loopdne'
              'loopdnz'
              'loopdz'
              'loope'
              'loopne'
              'loopnz'
              'loopz'
              'low'
              'lsl'
              'lss'
              'lt'
              'ltr'
              'macro'
              'mask'
              'mod'
              'mov'
              'movs'
              'movsb'
              'movsd'
              'movsw'
              'movsx'
              'movzx'
              'mul'
              'name'
              'near'
              'neg'
              'nop'
              'not'
              'offset'
              'or'
              'org'
              'out'
              'outsb'
              'outsd'
              'outsw'
              'page'
              'pop'
              'popa'
              'popad'
              'popf'
              'popfd'
              'proc'
              'ptr'
              'public'
              'purge'
              'push'
              'pusha'
              'pushad'
              'pushf'
              'pushfd'
              'qword'
              'rcl'
              'rcr'
              'record'
              'rep'
              'repe'
              'repne'
              'repnz'
              'rept'
              'repz'
              'ret'
              'retf'
              'retn'
              'rol'
              'ror'
              'sahf'
              'sal'
              'sar'
              'sbb'
              'scas'
              'scasb'
              'scasd'
              'scasw'
              'seg'
              'segcs'
              'segds'
              'seges'
              'segfs'
              'seggs'
              'segment'
              'segss'
              'seta'
              'setae'
              'setb'
              'setbe'
              'setc'
              'sete'
              'setg'
              'setge'
              'setl'
              'setle'
              'setna'
              'setnae'
              'setnb'
              'setnbe'
              'setnc'
              'setne'
              'setng'
              'setnge'
              'setnl'
              'setnle'
              'setno'
              'setnp'
              'setns'
              'setnz'
              'seto'
              'setp'
              'setpe'
              'setpo'
              'sets'
              'setz'
              'sgdt'
              'shl'
              'shld'
              'short'
              'shr'
              'shrd'
              'si'
              'sidt'
              'size'
              'sldt'
              'small'
              'smsw'
              'st'
              'stc'
              'std'
              'sti'
              'stos'
              'stosb'
              'stosd'
              'stosw'
              'str'
              'struc'
              'sub'
              'subttl'
              'symtype'
              'tbyte'
              'test'
              'this'
              'title'
              'type'
              'verr'
              'verw'
              'wait'
              'wbinvd'
              'width'
              'word'
              'xadd'
              'xchg'
              'xlat'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '; x86 assembly sample source'
      '  CODE'#9'SEGMENT'#9'BYTE PUBLIC '
      '    ASSUME'#9'CS:CODE'
      '    '
      '    PUSH SS'
      '    POP DS'
      '    MOV AX, AABBh'
      '    MOV'#9'BYTE PTR ES:[DI], 255'
      '    JMP SHORT @AsmEnd'
      ''
      '  welcomeMsg DB '#39#39'Hello World'#39#39', 0'
      ''
      '  @AsmEnd:'
      '    MOV AX, 0'
      ''
      '  CODE'#9'ENDS'
      'END')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'asm'
    LexerName = 'Assembler'
  end
  object SyntAnal1: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlight
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = clLime
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clSilver
        BorderTypeTop = blSolid
        BorderColorTop = clSilver
        BorderTypeRight = blSolid
        BorderColorRight = clSilver
        BorderTypeBottom = blSolid
        BorderColorBottom = clSilver
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^!~]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'base'
              'bool'
              'break'
              'byte'
              'case'
              'catch'
              'char'
              'checked'
              'class'
              'const'
              'continue'
              'decimal'
              'default'
              'delegate'
              'do'
              'double'
              'else'
              'enum'
              'event'
              'explicit'
              'extern'
              'false'
              'finally'
              'fixed'
              'float'
              'for'
              'foreach'
              'get'
              'goto'
              'if'
              'implicit'
              'in'
              'int'
              'interface'
              'internal'
              'is'
              'lock'
              'long'
              'namespace'
              'new'
              'null'
              'object'
              'operator'
              'out'
              'override'
              'params'
              'private'
              'protected'
              'public'
              'readonly'
              'ref'
              'return'
              'sbyte'
              'sealed'
              'set'
              'short'
              'sizeof'
              'static'
              'string'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typeof'
              'uint'
              'ulong'
              'unchecked'
              'unsafe'
              'ushort'
              'using'
              'virtual'
              'void'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '#if'
        ConditionList = <
          item
            TagList.Strings = (
              '#if*'
              '#ifdef*'
              '#ifndef*')
            CondType = tcMask
            TokenTypes = 1024
          end>
        BlockEnd = '#endif'
        HighlightPos = cpAny
      end
      item
        DisplayName = '#endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#endif')
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function begin'
        BlockName = 'function begin'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 12
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'class')
            CondType = tcNotEqual
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'function end'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '{ ... }'
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'end of class'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'namespace'
        ConditionList = <
          item
            TagList.Strings = (
              'namespace')
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'end of namespace'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockName = 'Begin'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'end of class'
        BlockName = 'class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'end of namespace'
        BlockName = 'namespace'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '/* ... */'
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = '#Region begin'
        ConditionList = <
          item
            TagList.Strings = (
              '\#region')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = '#End region'
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = '#End region'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#endregion')
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        CollapseFmt = '[ ... ]'
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'XML doc'
        Enabled = False
        StartExpression = '///'
        EndExpression = '(?s)(\r\n | ///)'
        SyntAnalyzer = SyntAnal22
      end>
    SampleText.Strings = (
      '// C# syntax highlighting '
      'public class Stack'
      '{'
      '  private Node first = null;'
      '  public bool Empty {'
      '    get {'
      '      return (first == null);'
      '    }'
      '  }'
      '  public object Pop() {'
      '    if (first == null)'
      '      throw new Exception("Can'#39't Pop from an empty Stack.");'
      '    else {'
      '      object temp = first.Value;'
      '      first = first.Next;'
      '      return temp;'
      '    }'
      '  }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'c cpp h cs'
    LexerName = 'C#'
    LineComment = '//'
  end
  object SyntAnal5: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~!]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'boolean'
              'break'
              'byte'
              'case'
              'catch'
              'char'
              'class'
              'const'
              'continue'
              'default'
              'do'
              'double'
              'else'
              'extends'
              'false'
              'final'
              'finally'
              'float'
              'for'
              'goto'
              'if'
              'implements'
              'import'
              'instanceof'
              'int'
              'interface'
              'long'
              'native'
              'new'
              'null'
              'package'
              'private'
              'protected'
              'public'
              'return'
              'short'
              'static'
              'super'
              'switch'
              'synchronized'
              'this'
              'throw'
              'throws'
              'transient'
              'true'
              'try'
              'void'
              'volatile'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function begin'
        BlockName = 'class start'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'function end'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'class start'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        BlockEnd = 'End'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'class end'
        Enabled = False
        BlockName = 'class start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* Java syntax highlighting */'
      'import java.util.*;'
      ''
      '/** Example class */'
      'public class Sample {'
      '  public static void main(String[] args) {'
      '    int i = 0;'
      '    for(i = 0; i < 10; i++)'
      '      System.out.println("Hello world");'
      '  }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'java'
    LexerName = 'Java Builder'
  end
  object SyntAnal8: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Something'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsUnderline]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 8
        Expression = '\$.\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Something'
        StyleName = 'Something'
        TokenType = 9
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__DATA__'
              '__END__'
              '__FILE__'
              '__LINE__'
              '__PACKAGE__'
              'abs'
              'accept'
              'alarm'
              'and'
              'atan2'
              'AUTOLOAD'
              'BEGIN'
              'bind'
              'binmode'
              'bless'
              'caller'
              'chdir'
              'CHECK'
              'chmod'
              'chomp'
              'chop'
              'chown'
              'chr'
              'chroot'
              'close'
              'closedir'
              'cmp'
              'connect'
              'continue'
              'CORE'
              'cos'
              'crypt'
              'dbmclose'
              'dbmopen'
              'define'
              'defined'
              'delete'
              'DESTROY'
              'die'
              'do'
              'dump'
              'each'
              'else'
              'elsif'
              'END'
              'endgrent'
              'endhostent'
              'endnetent'
              'endprotoent'
              'endpwent'
              'endservent'
              'eof'
              'EQ'
              'eval'
              'exec'
              'exists'
              'exit'
              'exp'
              'fcntl'
              'fileno'
              'flock'
              'for'
              'foreach'
              'fork'
              'format'
              'formline'
              'GE'
              'getc'
              'getgrent'
              'getgrgid'
              'getgrnam'
              'gethostbyaddr'
              'gethostbyname'
              'gethostent'
              'getlogin'
              'getnetbyaddr'
              'getnetbyname'
              'getnetent'
              'getpeername'
              'getpgrp'
              'getppid'
              'getpriority'
              'getprotobyname'
              'getprotobynumber'
              'getprotoent'
              'getpwent'
              'getpwnam'
              'getpwuid'
              'getservbyname'
              'getservbyport'
              'getservent'
              'getsockname'
              'getsockopt'
              'glob'
              'gmtime'
              'goto'
              'grep'
              'GT'
              'hex'
              'if'
              'index'
              'INIT'
              'int'
              'ioctl'
              'join'
              'keys'
              'kill'
              'last'
              'lc'
              'lcfirst'
              'LE'
              'length'
              'link'
              'listen'
              'local'
              'localtime'
              'lock'
              'log'
              'lstat'
              'LT'
              'm'
              'map'
              'mkdir'
              'msgctl'
              'msgget'
              'msgrcv'
              'msgsnd'
              'my'
              'NE'
              'next'
              'no'
              'not'
              'NULL'
              'oct'
              'open'
              'opendir'
              'or'
              'ord'
              'our'
              'pack'
              'package'
              'pipe'
              'pop'
              'pos'
              'print'
              'printf'
              'prototype'
              'push'
              'q'
              'qq'
              'qr'
              'qu'
              'quotemeta'
              'qw'
              'qx'
              'rand'
              'read'
              'readdir'
              'readline'
              'readlink'
              'readpipe'
              'recv'
              'redo'
              'ref'
              'rename'
              'require'
              'reset'
              'return'
              'reverse'
              'rewinddir'
              'rindex'
              'rmdir'
              's'
              'scalar'
              'seek'
              'seekdir'
              'select'
              'semctl'
              'semget'
              'semop'
              'send'
              'setgrent'
              'sethostent'
              'setnetent'
              'setpgrp'
              'setpriority'
              'setprotoent'
              'setpwent'
              'setservent'
              'setsockopt'
              'shift'
              'shmctl'
              'shmget'
              'shmread'
              'shmwrite'
              'shutdown'
              'sin'
              'sleep'
              'socket'
              'socketpair'
              'sort'
              'splice'
              'split'
              'sprintf'
              'sqrt'
              'srand'
              'stat'
              'study'
              'sub'
              'substr'
              'symlink'
              'syscall'
              'sysopen'
              'sysread'
              'sysseek'
              'system'
              'syswrite'
              'tell'
              'telldir'
              'tie'
              'tied'
              'time'
              'times'
              'tr'
              'truncate'
              'uc'
              'ucfirst'
              'umask'
              'undef'
              'unless'
              'unlink'
              'unpack'
              'unshift'
              'untie'
              'until'
              'use'
              'utime'
              'values'
              'vec'
              'wait'
              'waitpid'
              'wantarray'
              'warn'
              'while'
              'write'
              'x'
              'xor'
              'y')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#!/bin/perl'
      'require "cgi-lib.pl";   '
      'use sigtrap;'
      'do '#39'envars.pl'#39';'
      '$_ = $password1;'
      'sub WriteBack {'
      '        while ($_ ne "fred")    {'
      '                sleep 5;'
      '        }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Something')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'pl pm cgi pod'
    LexerName = 'Perl'
  end
  object SyntAnal16: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 16119285
        FormatType = ftColor
        BorderTypeBottom = blDot
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = 15987689
      end
      item
        DisplayName = 'Code block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 15856098
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Code border'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = clBlack
      end
      item
        DisplayName = 'HTML'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end>
    TokenRules = <
      item
        DisplayName = 'Code block start'
        StyleName = 'Code border'
        TokenType = 9
        Expression = '<\?(php)?'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Code block end'
        StyleName = 'Code border'
        TokenType = 10
        Expression = '\?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)"(\\"|.)*?"'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'string 2'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 2
        Expression = '\$\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[!/\+\-\*:=<>&/\|\^~]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'break'
              'case'
              'class'
              'continue'
              'default'
              'define'
              'defined'
              'do'
              'echo'
              'else'
              'elseif'
              'endfor'
              'endif'
              'endswitch'
              'endwhile'
              'exit'
              'extends'
              'for'
              'function'
              'gettype'
              'global'
              'if'
              'include'
              'int'
              'isset'
              'old_function'
              'print'
              'pval'
              'require'
              'return'
              'settype'
              'static'
              'string'
              'switch'
              'var'
              'void'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Code block start'
        StyleName = 'Code block'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Code block end'
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Code block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'HTML'
        StyleName = 'HTML'
        StartExpression = '\?>'#13#10
        EndExpression = '<\?'#13#10
        SyntAnalyzer = SyntAnalyzer9
        FromTextBegin = True
      end>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Code Start'
      'Code End')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'php'
    LexerName = 'PHP'
  end
  object SyntAnal2: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Assembler'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 15724510
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
        BorderColorLeft = clRed
        BorderColorTop = clRed
        BorderColorRight = clRed
        BorderColorBottom = clRed
        MultiLineBorder = True
      end
      item
        DisplayName = 'Interface section'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlight
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 15269887
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Implemenation Section'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 16121842
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clRed
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Current function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 16776187
        FormatType = ftBackGround
        MultiLineBorder = True
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 16772341
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Search Match'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -16
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = clBlack
      end
      item
        DisplayName = 'Group (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Intern. function (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'class (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 1'
        StyleName = 'Preprocessor'
        AlwaysEnabled = True
        TokenType = 9
        Expression = '\{\$.*?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 2'
        StyleName = 'Preprocessor'
        AlwaysEnabled = True
        TokenType = 9
        Expression = '\(\*\$.*?\*\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'and'
              'array'
              'as'
              'asm'
              'begin'
              'case'
              'class'
              'const'
              'constructor'
              'contains'
              'destructor'
              'dispinterface'
              'div'
              'do'
              'downto'
              'dynamic'
              'else'
              'end'
              'except'
              'exports'
              'file'
              'finalization'
              'finally'
              'for'
              'function'
              'goto'
              'if'
              'implementation'
              'in'
              'index'
              'inherited'
              'initialization'
              'inline'
              'interface'
              'is'
              'label'
              'library'
              'mod'
              'nil'
              'not'
              'object'
              'of'
              'or'
              'out'
              'override'
              'package'
              'packed'
              'pascal'
              'private'
              'procedure'
              'program'
              'property'
              'protected'
              'public'
              'published'
              'raise'
              'read'
              'record'
              'register'
              'repeat'
              'requires'
              'resourcestring'
              'safecall'
              'set'
              'shl'
              'shr'
              'stdcall'
              'string'
              'then'
              'threadvar'
              'to'
              'try'
              'type'
              'unit'
              'until'
              'uses'
              'var'
              'virtual'
              'while'
              'with'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Forward'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'forward'
              'of')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 10
      end
      item
        DisplayName = 'begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'case'
              'try')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'asm'
        StyleName = 'Assembler'
        ConditionList = <
          item
            TagList.Strings = (
              'asm')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        Highlight = True
        InvertColors = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpAny
        CollapseFmt = 'ASM'
      end
      item
        DisplayName = '{$ifdef}'
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$if[n]?def')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = '{$endif}'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = '{$endif}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '{$endif}')
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'until')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'repeat'
        ConditionList = <
          item
            TagList.Strings = (
              'repeat')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = 'repeat ...'
      end
      item
        DisplayName = 'program'
        ConditionList = <
          item
            TagList.Strings = (
              'program'
              'unit')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockEnd = 'Unit end'
        EndOfTextClose = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
        TreeItemImage = 0
      end
      item
        DisplayName = 'class declaration'
        BlockName = 'class declaration'
        NotParent = True
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        GrammaRuleName = 'ClassDecl'
        TreeItemStyle = 'class (tree)'
        TreeItemImage = 1
      end
      item
        DisplayName = 'Empty class'
        ConditionList = <>
        NotCollapsed = True
        NameFmt = '%s-2 %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        NoEndRule = True
        GrammaRuleName = 'EmptyClass'
        TreeItemImage = 4
      end
      item
        DisplayName = 'Interface declaration'
        BlockName = 'Interface declaration'
        NotParent = True
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        GroupFmt = 'Interfaces'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        GrammaRuleName = 'IntfDecl'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 2
        TreeGroupImage = 0
      end
      item
        DisplayName = 'record'
        ConditionList = <
          item
            TagList.Strings = (
              'record')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        GroupFmt = 'Types'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 3
        TreeGroupImage = 0
      end
      item
        DisplayName = 'end of type'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '{ ... }'
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Interface section'
        StyleName = 'Interface section'
        BlockName = 'program'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'interface')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Interface section end'
        EndOfTextClose = True
        Highlight = True
        DisplayInTree = False
        NameFmt = 'Interface section'
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = 'Interface section'
      end
      item
        DisplayName = 'Interface section end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'implementation')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Implementation section'
        StyleName = 'Implemenation Section'
        ConditionList = <
          item
            TagList.Strings = (
              'implementation')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Unit end'
        EndOfTextClose = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = 'Implementation section'
      end
      item
        DisplayName = 'finalization'
        ConditionList = <
          item
            TagList.Strings = (
              'finalization')
            TokenTypes = 4
            IgnoreCase = True
          end>
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = 'Unit end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 2
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Function separator'
        StyleName = 'Function separator'
        BlockName = 'Implementation section'
        StrictParent = True
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Internal function'
        BlockName = 'function of class'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal'
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
      end
      item
        DisplayName = 'End of internal'
        BlockName = 'Internal function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 1032
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'Single function'
        StyleName = 'Current function'
        BlockName = 'Implementation section'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '('
              ';')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = 'End of function'
        Highlight = True
        NameFmt = '%s2 %s1'
        GroupFmt = 'Functions'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 5
        TreeGroupImage = 0
      end
      item
        DisplayName = 'End of function'
        BlockName = 'Single function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 1032
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function of class'
        StyleName = 'Current function'
        BlockName = 'Implementation section'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockOffset = 2
        BlockEnd = 'End of class function'
        Highlight = True
        NameFmt = '%s-1'
        GroupFmt = 'class %s1'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1%s0%s-1'
        TreeItemImage = 6
      end
      item
        DisplayName = 'End of class function'
        BlockName = 'function of class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Internal function 2'
        BlockName = 'Single function'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal 2'
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
      end
      item
        DisplayName = 'End of internal 2'
        BlockName = 'Internal function 2'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 1028
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <
      item
        Name = 'be'
        Description = 'begin end'
        Code.Strings = (
          'begin'
          '  <caret>'
          'end;')
        Advanced = True
      end
      item
        Name = 'arrayd'
        Description = 'array declaration (var)'
        Code.Strings = (
          'array[0..|] of ;')
      end
      item
        Name = 'arrayc'
        Description = 'array declaration (const)'
        Code.Strings = (
          'array[0..|] of = ();')
      end
      item
        Name = 'cases'
        Description = 'case statement'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'end;')
      end
      item
        Name = 'casee'
        Description = 'case statement (with else)'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'else ;'
          'end;')
      end
      item
        Name = 'classf'
        Description = 'class declaration (all parts)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          ''
          'published'
          ''
          'end;')
      end
      item
        Name = 'classd'
        Description = 'class declaration (no parts)'
        Code.Strings = (
          'T| = class(T)'
          ''
          'end;')
      end
      item
        Name = 'classc'
        Description = 'class declaration (with Create/Destroy overrides)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          '  constructor Create; override;'
          '  destructor Destroy; override;'
          'published'
          ''
          'end;')
      end
      item
        Name = 'fors'
        Description = 'for (no begin/end)'
        Code.Strings = (
          'for | :=  to  do')
      end
      item
        Name = 'forb'
        Description = 'for statement'
        Code.Strings = (
          'for | :=  to  do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'function'
        Description = 'function declaration'
        Code.Strings = (
          'function |(): ;'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ifs'
        Description = 'if (no begin/end)'
        Code.Strings = (
          'if | then')
      end
      item
        Name = 'ifb'
        Description = 'if statement'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ife'
        Description = 'if then (no begin/end) else (no begin/end)'
        Code.Strings = (
          'if | then'
          ''
          'else')
      end
      item
        Name = 'ifeb'
        Description = 'if then else'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end'
          'else'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'procedure'
        Description = 'procedure declaration'
        Code.Strings = (
          'procedure |();'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'trye'
        Description = 'try except'
        Code.Strings = (
          'try'
          '  |'
          'except'
          ''
          'end;')
      end
      item
        Name = 'tryf'
        Description = 'try finally'
        Code.Strings = (
          'try'
          '  |'
          'finally'
          ''
          'end;')
      end
      item
        Name = 'trycf'
        Description = 'try finally (with Create/Free)'
        Code.Strings = (
          '|variable := typename.Create;'
          'try'
          ''
          'finally'
          '  variable.Free;'
          'end;')
      end
      item
        Name = 'whileb'
        Description = 'while statement'
        Code.Strings = (
          'while | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'whiles'
        Description = 'while (no begin)'
        Code.Strings = (
          'while | do')
      end
      item
        Name = 'withb'
        Description = 'with statement'
        Code.Strings = (
          'with | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'withs'
        Description = 'with (no begin)'
        Code.Strings = (
          'with | do')
      end
      item
        Name = 'prop'
        Description = 'property'
        Code.Strings = (
          'property | read  write;')
      end>
    SubAnalyzers = <
      item
        DisplayName = 'asm section'
        StartExpression = 'asm\b'#13#10
        EndExpression = 'end'#13#10
        SyntAnalyzer = SyntAnalyzer13
      end>
    SampleText.Strings = (
      'implementation'
      '{Syntax highlighting}'
      'procedure TForm1.Button1Click(Sender: TObject);'
      'var'
      ' Number: integer;'
      ' FloatNumber: double;'
      'begin'
      ' Number := 123;  // View integer number style'
      
        ' Caprion := '#39'This Number is '#39' + IntToStr(Number); // View string' +
        ' style'
      ' Inc(Number, $1FA7); // View HEX style'
      ' {Assembler style}'
      ' asm'
      '   MOV  AX, 1234H'
      '   MOV Number, AX'
      ' end;'
      'end;')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Forward')
    Gramma.Gramma = 
      'Skip = <Comment> | <Preprocessor>;'#13#10#13#10'// Class declaration'#13#10'Clas' +
      'sDecl = <Identifier> '#39'='#39' '#39'class'#39' InheritedList? <Identifier>;'#13#10#13 +
      #10'EmptyClass = <Identifier> '#39'='#39' "class" InheritedList '#39';'#39'; '#13#10#13#10'//' +
      ' Interface declaration'#13#10'IntfDecl = <Identifier> '#39'='#39' ("interface"' +
      ' | "dispinterface") InheritedList? IntfNextToken;'#13#10'IntfNextToken' +
      ' = '#39'['#39' | <Identifier>; '#13#10#13#10'InheritedList = '#39'('#39' IdentList '#39')'#39';'#13#10'I' +
      'dentList = <Identifier> ('#39','#39' <Identifier>)*;'#13#10
    MarkedBlockStyle = 'Marked block'
    SearchMatchStyle = 'Search Match'
    CurrentLineStyle = 'Current Line'
    DefaultStyleName = 'Default'
    Extentions = 'pas inc dpr dpk'
    LexerName = 'Pascal'
    LineComment = '//'
  end
  object SyntAnal3: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'Plain Text'
  end
  object SyntAnal4: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Default'
        Font.Charset = ANSI_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 13369080
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Reserved Word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []      
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end>
    TokenRules = <
      item
        DisplayName = 'Float'
        StyleName = 'Symbol'
        TokenType = 6
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end      
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Default'
        TokenType = 2
        Expression = '[\w$\#]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)'#39'.*?('#39'|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-\{\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Reserved Words'
        StyleName = 'Reserved Word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ABORT'
              'AFFINITY'
              'AFTER'
              'ALL'
              'ALLOCATE'
              'ALTER'
              'AND'
              'APPEND'
              'ARCHIVELOG'
              'AT'
              'ATALL'
              'AUTOBACKUP'
              'AUTOLOCATE'
              'AUXILIARY'
              'AUXNAME'
              'AVAILABLE'
              'BACKED'
              'BACKUP'
              'BACKUPPIECE'
              'BACKUPSET'
              'BEFORE'
              'BETWEEN'
              'BLOCK'
              'BLOCKRECOVER'
              'BLOCKS'
              'BY'
              'CANCEL'
              'CATALOG'
              'CHANGE'
              'CHANNEL'
              'CHARSET'
              'CHECK'
              'CLEAR'
              'CLONE'
              'CLONE_CF'
              'CLONENAME'
              'CMDFILE'
              'COMMAND'
              'COMPATIBLE'
              'COMPLETED'
              'CONFIGURE'
              'CONNECT'
              'CONSISTENT'
              'CONTROLFILE'
              'CONTROLFILECOPY'
              'COPIES'
              'COPY'
              'CORRUPTION'
              'CREATE'
              'CROSSCHECK'
              'CUMULATIVE'
              'CURRENT'
              'DATABASE'
              'DATAFILE'
              'DATAFILECOPY'
              'DAYS'
              'DBA'
              'DBID'
              'DEBUG'
              'DEFAULT'
              'DEFINE'
              'DELETE'
              'DESTINATION'
              'DEVICE'
              'DISK'
              'DISKRATIO'
              'DISPLAY'
              'DORECOVER'
              'DROP'
              'DUMP'
              'DUPLEX'
              'DUPLICATE'
              'ECHO'
              'EXCLUDE'
              'EXECUTE'
              'EXIT'
              'EXPIRED'
              'FILE'
              'FILES'
              'FILESPERSET'
              'FINAL'
              'FOR'
              'FORCE'
              'FOREVER'
              'FORMAT'
              'FROM'
              'FULL'
              'G'
              'GET'
              'GROUP'
              'HIGH'
              'HOST'
              'ID'
              'IDENTIFIER'
              'IMMEDIATE'
              'INACCESSIBLE'
              'INCARNATION'
              'INCLUDE'
              'INCREMENTAL'
              'INPUT'
              'IO'
              'JOB'
              'K'
              'KBYTES'
              'KEEP'
              'LEVEL'
              'LIBNAME'
              'LIBPARM'
              'LIBRARY'
              'LIBTEXT'
              'LIKE'
              'LIMIT'
              'LIST'
              'LOG'
              'LOGFILE'
              'LOGICAL'
              'LOGS'
              'LOGSCN'
              'LOGSEQ'
              'LOW'
              'M'
              'MAINTENANCE'
              'MASK'
              'MAXCORRUPT'
              'MAXDAYS'
              'MAXOPENFILES'
              'MAXPIECESIZE'
              'MAXSEQ'
              'MAXSETSIZE'
              'MAXSIZE'
              'MISC'
              'MOUNT'
              'MSGLOG'
              'MSGNO'
              'NAME'
              'NEED'
              'NEW'
              'NEW-LINE'
              'NEWNAME'
              'NOCATALOG'
              'NOCFAU'
              'NOCHECKSUM'
              'NOEXCLUDE'
              'NOFILENAMECHECK'
              'NOFILEUPDATE'
              'NOKEEP'
              'NOLOGS'
              'NOMOUNT'
              'NONE'
              'NOPROMPT'
              'NOREDO'
              'NORMAL'
              'NOT'
              'NULL'
              'OBSOLETE'
              'OF'
              'OFF'
              'OFFLINE'
              'ON'
              'ONLY'
              'OPEN'
              'OPTIMIZATION'
              'ORPHAN'
              'PACKAGES'
              'PARALLELISM'
              'PARMS'
              'PFILE'
              'PIPE'
              'PLSQL'
              'PLUS'
              'POLICY'
              'POOL'
              'PRINT'
              'PROXY'
              'PUT'
              'QUIT'
              'RATE'
              'RCVCAT'
              'RCVMAN'
              'READONLY'
              'READRATE'
              'RECOVER'
              'RECOVERABLE'
              'RECOVERY'
              'REDUNDANCY'
              'REGISTER'
              'RELEASE'
              'RELOAD'
              'REMOVE'
              'RENORMALIZE'
              'REPLACE'
              'REPLICATE'
              'REPORT'
              'RESET'
              'RESETLOGS'
              'RESTART'
              'RESTORE'
              'RESYNC'
              'RETENTION'
              'REUSE'
              'RPC'
              'RPCTEST'
              'RUN'
              'SAVE'
              'SCHEMA'
              'SCN'
              'SEND'
              'SEQUENCE'
              'SET'
              'SETLIMIT'
              'SETSIZE'
              'SHOW'
              'SHUTDOWN'
              'SINCE'
              'SIZE'
              'SKIP'
              'SLAXDEBUG'
              'SNAPSHOT'
              'SPFILE'
              'SPOOL'
              'SQL'
              'STANDBY'
              'STARTUP'
              'STEP'
              'SUMMARY'
              'SWITCH'
              'TABLESPACE'
              'TAG'
              'TARGET'
              'TEST'
              'THREAD'
              'TIME'
              'TIMEOUT'
              'TIMES'
              'TO'
              'TRACE'
              'TRANSACTIONAL'
              'TXT'
              'TYPE'
              'UNAVAILABLE'
              'UNCATALOG'
              'UNLIMITED'
              'UNRECOVERABLE'
              'UNTIL'
              'UNUSED'
              'UP'
              'UPGRADE'
              'VALIDATE'
              'VERBOSE'
              'WINDOW')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block Start'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'run')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Block End'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block End'
        BlockName = 'Block Start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
            IgnoreCase = True
          end>
        BlockEnd = 'Block Start'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    CurrentLineStyle = 'Current Line'
    DefaultStyleName = 'Default'
    Extentions = 'rcv'
    LexerName = 'RMAN'
  end
end
